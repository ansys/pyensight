name: GitHub CI

# run only on main branch.  This avoids duplicated actions on PRs
on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - "*"
    branches:
      - main

env:
  DOCUMENTATION_CNAME: 'ensight.docs.pyansys.com'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  style:
    name: Code style
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys code style checks
        uses: ansys/actions/code-style@v4
        with:
          python-version: ${{ env.MAIN_PYTHON_VERSION }}

  docs-style:
    name: Documentation Style Check
    runs-on: ubuntu-latest
    steps:
      - name: PyAnsys documentation style checks
        uses: ansys/actions/doc-style@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  smoketest:
    name: Smoke test
    needs: [style]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [ '3.9', '3.10', '3.11' ]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build requirements
        run: pip install -r requirements/build.txt

      - name: Create wheel
        run: make build

      - name: Install pyensight
        run: make install

      - name: Test import
        run: make smoketest

  build_and_test:
    name: Build & test
    needs: [smoketest]
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install build requirements
        run: pip install .[test]

      - name: Create wheel
        run: make build

      - name: Validate wheel
        run: twine check dist/*

      - name: Install pyensight
        run: make install

      - name: Install test requirements
        run: pip install -r requirements/test.txt

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: docker
        run: make pull-docker

      - name: Unit testing
        run: |
          make test
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}

      - name: Upload coverage report
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v3
        with:
          name: coverage-html
          path: coverage-html/
          retention-days: 7
          if-no-files-found: error

      - name: Upload wheel
        if: ${{ !env.ACT }}
        uses: actions/upload-artifact@v3
        with:
          name: ansys-pyensight-wheel
          path: dist/
          retention-days: 7
          if-no-files-found: error

  docs:
    name: Build docs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9

      - name: Install build requirements
        run: pip install -r requirements/build.txt

      - name: Generate EnSight bindings
        run: make generate

      - name: Build EnSight wheel
        run: make build

      - name: Install EnSight bindings
        run: make install

      - name: Install doc requirements
        run: pip install -r requirements/docs.txt

      - name: Install test requirements
        run: pip install -r requirements/test.txt

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: docker
        run: make pull-docker

      - name: Build HTML
        run: |
          make -C doc html SPHINXOPTS="-W"
          touch doc/build/html/.nojekyll
        env:
          ANSYSLMD_LICENSE_FILE: ${{ format('1055@{0}', secrets.LICENSE_SERVER) }}

      - name: Upload HTML Documentation
        if: ${{ !env.ACT }} && github.event_name == 'push' && contains(github.ref, 'refs/tags')
        uses: actions/upload-artifact@v2
        with:
          name: Documentation-html
          path: doc/build/html
          retention-days: 7

  doc-deploy-dev:
    name: "Deploy development documentation"
    # Deploy development only when merging to main
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: docs
    steps:
      - name: "Deploy the latest documentation"
        uses: ansys/actions/doc-deploy-dev@v3
        with:
            doc-artifact-name: Documentation-html
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    if: contains(github.ref, 'refs/tags')
    needs: [ build_and_test, docs ]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: ansys-pyensight-wheel

      - uses: actions/download-artifact@v2
        with:
          name: Documentation-html
          path: ~/html

      # list current directory
      - name: List directory structure
        run: ls -R

      - name: Upload to Azure PyPi (disabled)
        if: ${{ !env.ACT }}
        run: |
          pip install twine
          twine upload --skip-existing ./**/*.whl
        env:
          TWINE_USERNAME: PAT
          TWINE_PASSWORD: ${{ secrets.PYANSYS_PYPI_PRIVATE_PAT }}
          TWINE_REPOSITORY_URL: ${{ secrets.PRIVATE_PYPI_URL }}

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ./**/*.whl
            ./**/*.zip

  doc-deploy-stable:
    name: "Deploy stable documentation"
    # Deploy release documentation when creating a new tag
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags')
    runs-on: ubuntu-latest
    needs: docs
    steps:
      - name: "Deploy the stable documentation"
        uses: ansys/actions/doc-deploy-stable@v3
        with:
            doc-artifact-name: Documentation-html
            cname: ${{ env.DOCUMENTATION_CNAME }}
            token: ${{ secrets.GITHUB_TOKEN }}

  build-failure:
    name: Teams notify on failure
    if: failure() && (github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref_type == 'tag')
    needs: [smoketest, build_and_test ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Microsoft Teams Notification
        uses: jdcargile/ms-teams-notification@v1.3
        with:
          github-token: ${{ github.token }} # this will use the runner's token.
          ms-teams-webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          notification-summary: GitHub CI failure - ${{ github.event.pull_request.title }}
          notification-color: dc3545
          timezone: America/New_York
