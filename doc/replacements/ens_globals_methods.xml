<docstrings>

<override namespace="ensight.objs.ENS_GLOBALS.selection">
<todosignature>(type: Type["ENSOBJ"] = None, name: str = "") -> "ENS_GROUP"</todosignature>
<todoparamnames>['type=', 'name=']</todoparamnames>
<description>
Access the EnSight selection objects::

    ENS_GLOBALS.selection(name: str = None, type: Type[ENSOBJ] = None) -> ENS_GROUP


Returns an ENS_GROUP object representing the current selection in EnSight.
The method supports two keyword: 'name' and 'type'.  Only one of these
can set specified.  They specify which selection ENS_GROUP to return.
If no keyword is specified, name='ENS_PART' is the default.


Args:
    name:
        This keyword can be 'ENS_PART', 'ENS_VAR', 'ENS_ANNOT' to select a specific class.
    type:
        This keyword can be ensight.objs.ENS_PART, ensight.objs.ENS_VAR, ensight.objs.ENS_ANNOT.


Returns:
    An :class:`ENS_GROUP&lt;pyensight.ens_group.ENS_GROUP&gt;` instance.

</description>
</override>

<override namespace="ensight.objs.ENS_GLOBALS.create_variable">
<signature>(name: str, value: str, sources: List["ENS_PART"] = None,
            private: int = 0) -> "ENS_VAR"</signature>
<paramnames>['name', 'value', "sources=", "private="]</paramnames>
<description>
This method creates a new EnSight variable.


It creates a variable with the provided name, using the calculator expression
supplied by the value. If the expression requires a partlist, this
is supplied using the 'sources' keyword (the default is the current part selection).

Args:
    name:
        The name of the variable to create.
    value:
        The expression to evaluate as the new variable.  See also: :ref:`Calculator Functions &lt;calculator_functions&gt;`.
    sources:
        A list of parts to create the variable with. This can be specified as an ENS_GROUP object, or a list of part names/ids/objects.
    private:
        If the private=1 keyword is set, the variable will be marked as "hidden" and will not show up in some part lists (e.g. in popup dialogs).


Returns:
    An :class:`ENS_VAR&lt;pyensight.ens_var.ENS_VAR&gt;` instance.


Example:
    ::

        var = session.ensight.objs.core.create_variable("EleSize", "EleSize(plist)", sources=session.ensight.objs.core.PARTS)

</description>
</override>


<override namespace="ensight.objs.ENS_GLOBALS.get_units">
<signature>(obj: Union["ENS_VAR", str], format: int = 0, utf8: int = 0,
            prefix: str = "", suffix: str = "") -> Union[str, bytes]</signature>
<paramnames>["obj", "format=", "utf8=", "prefix=", "suffix="]</paramnames>
<description>
Generate a string that represents the appropriate label for a given object.


This method will look at the specified :class:`ENS_VAR &lt;ansys.api.pyensight.ens_var.ENS_VAR&gt;` object
and get any unit information specified by the UNIT schema.  The API can generate labels from DIMS
and SYSTEM values if no explicit label string has been specified for the variable object.
It will then return a string with the specified prefix and suffix strings added before
the units and after the unit string. It is also legal to pass a dimensions string
instead of a variable object.  For example :samp:`ensight.objs.core.get_units("L/TT")`.

The format and utf8 keywords control the specific format of the string.
The format can be: 0=raw, 1=Unicode or 2=EnSight annotation string.  If Unicode is
selected, the string will be in unicode unless utf8=2 is specified, in which case
an UTF8 encoded bytes object will be returned.


Args:
    obj:
        A variable/part object or a string representing units by dimensional specification.  For
        example, "L/TT" (length/time*time) for acceleration.
    format:
        The specific string format.  0=simple raw ASCII, 1=Unicode string, 2=EnSight annotation.
    utf8:
        By default, the returned string is in Unicode.  If set to 2, a bytes object of the
        UTF8 representation is returned.
    prefix:
        A string used to prefix the unit string.
    suffix:
        A string used to suffix the unit string.

Returns:
    A string or bytes array.


Example:
    ::

        # For an ENS_VAR ('var') with the ENS_UNITS_LABEL and version 2.0 of the schema specified
        ensight.objs.core.get_units(var)
        'm^2 s^-2'

        ensight.objs.core.get_units(var, format=1)
        'm&#x00B2;/s&#x00B2;'

        ensight.objs.core.get_units(var, format=1, utf8=2)
        b'kg/m\\xc2\\xb3'


See also:
    `EnSight units &lt;https://nexusdemo.ensight.com/docs/python/html/Python.html?ENS_UNITSSchema.html&gt;`_

</description>
</override>

<override namespace="ensight.objs.ENS_GLOBALS.unit_system">
<signature>(name: Optional[str] = None, silent: int = 1, enumerate: int = -1,
            record: int = 0) -> Tuple[str, str, bool, dict]</signature>
<paramnames>["name=", "silent=", "enumerate=", "record="]</paramnames>
<description>
Get/set the current unit system to the named value (see ENS_UNITS_SYSTEM).


With no arguments, this method simply returns a tuple:
:samp:`('unit system string', 'unit system name', True if this is the session unit system,
a dictionary of the unit labels)`.  If a units system name is passed as 'name',
the method will attempt to set the current unit system. In this case, 'name' should
be set to the simple string name of the unit system (e.g. 'SI').  If the unit system
has been locked (e.g. a dataset has been loaded), the method will throw an
exception unless 'silent=1' (the default) has been specified. If 'record' is non-zero
and the unit system was changed, the change will be recorded in command language.
If enumerate is set to a number greater than -1, it will walk the list of known
unit systems.  When the end of the list is reached, an exception will be thrown.


Args:
    name:
        The name of a unit system, optional.
    silent:
        If non-zero suppress exceptions.
    enumerate:
        If 0 or greater, return details of the 'n-th' unit system.
    record:
        If non-zero, any operation that changes the unit system will be recorded to
        command language.

Returns:
    A tuple describing the selected unit system


Example:
    ::

        # The following snippet will dump the unit system table in EnSight.
        idx = 0
        while True:
            try:
                print(ensight.objs.core.unit_system(enumerate=idx))
            except:
                break
            idx += 1

        # Outputs:
        ('USER', 'User defined units', False, {'A': '', 'D': '', 'I': '', 'K': '', 'M': '', 'L': '', 'Q': '', 'T': ''})
        ('SI', 'Metric SI', False, {'A': 'mol', 'D': 'rad', 'I': 'cd', 'K': 'K', 'M': 'kg', 'L': 'm', 'Q': 'A', 'T': 's'})
        ('CGS', 'Metric CGS', False, {'A': 'mol', 'D': 'rad', 'I': 'cd', 'K': 'C', 'M': 'g', 'L': 'cm', 'Q': 'A', 'T': 's'})
        ('BFT', 'US ft Consistent', False, {'A': 'slugmol', 'D': 'rad', 'I': 'cd', 'K': 'F', 'M': 'slug', 'L': 'ft', 'Q': 'A', 'T': 's'})
        ('BIN', 'US in Consistent', False, {'A': 'lbmmol', 'D': 'rad', 'I': 'cd', 'K': 'F', 'M': 'slinch', 'L': 'in', 'Q': 'A', 'T': 's'})
        ('MKS', 'Metric MKS', False, {'A': 'mol', 'D': 'rad', 'I': 'cd', 'K': 'C', 'M': 'kg', 'L': 'm', 'Q': 'A', 'T': 's'})
        ('MPA', 'Metric MPA', False, {'A': 'mol', 'D': 'rad', 'I': 'cd', 'K': 'C', 'M': 'tonne', 'L': 'mm', 'Q': 'mA', 'T': 's'})
        ('uMKS', 'Metric uMKS', False, {'A': 'mol', 'D': 'rad', 'I': 'cd', 'K': 'C', 'M': 'kg', 'L': 'um', 'Q': 'pA', 'T': 's'})
        ('CGSK', 'Metric CGSK', False, {'A': 'mol', 'D': 'rad', 'I': 'cd', 'K': 'K', 'M': 'g', 'L': 'cm', 'Q': 'A', 'T': 's'})
        ('NMM', 'Metric NMM', False, {'A': 'mol', 'D': 'rad', 'I': 'cd', 'K': 'C', 'M': 'kg', 'L': 'mm', 'Q': 'mA', 'T': 's'})
        ('uMKSS', 'Metric uMKSS', False, {'A': 'mol', 'D': 'rad', 'I': 'cd', 'K': 'C', 'M': 'kg', 'L': 'um', 'Q': 'mA', 'T': 's'})
        ('NMMDAT', 'Metric NMMDAT', False, {'A': 'mol', 'D': 'rad', 'I': 'cd', 'K': 'C', 'M': 'decatonne', 'L': 'mm', 'Q': 'mA', 'T': 's'})
        ('NMMTON', 'Metric NMMTON', False, {'A': 'mol', 'D': 'rad', 'I': 'cd', 'K': 'C', 'M': 'tonne', 'L': 'mm', 'Q': 'mA', 'T': 's'})
        ('BFTS', 'US ft', False, {'A': 'lbmmol', 'D': 'rad', 'I': 'cd', 'K': 'F', 'M': 'lbm', 'L': 'ft', 'Q': 'A', 'T': 's'})
        ('BINS', 'US in', False, {'A': 'lbmmol', 'D': 'rad', 'I': 'cd', 'K': 'F', 'M': 'lbm', 'L': 'in', 'Q': 'A', 'T': 's'})
        ('USENG', 'US Engineering', False, {'A': 'lbmmol', 'D': 'rad', 'I': 'cd', 'K': 'R', 'M': 'lb', 'L': 'in', 'Q': 'A', 'T': 's'})
        ('Unknown', 'From first loaded case', False, {'A': '', 'D': '', 'I': '', 'K': '', 'M': '', 'L': '', 'Q': '', 'T': ''})


See also:
    `EnSight units &lt;https://nexusdemo.ensight.com/docs/python/html/Python.html?ENS_UNITSSchema.html&gt;`_

</description>
</override>

<override namespace="ensight.objs.ENS_GLOBALS.get_unit_dimensions">
<signature>(obj: "ENS_VAR", normalized: bool = False) -> str</signature>
<paramnames>["obj", "normalized="]</paramnames>
<description>
This method will return the units dimension string for a given variable object.


The dimension string is a collection of characters that represent fundamental quantities, mass,
length, time, etc.  The string repeats a character if the quantity is of another order (e.g.
volume would be "LL") and quantities with a negative exponent, will appear after a '/'
character.  These quantity characters include:

========== ======================
Character  Quantity (SI value)
========== ======================
M          Mass (Kilogram)
L          Length (Meter)
I          Intensity (Candela)
D          Angle (Radian)
K          Temperature (Kelvin)
Q          Current (Ampere)
T          Time (Second)
A          Substance amount (Mol)
========== ======================


If there is a variable 'v' that is velocity,
the call :samp:`ensight.object.core.get_unit_dimensions(v)` will return the
dimension string: "L/T".


Args:
    obj:
        An ENS_VAR object instance.
    normalized:
        If normalized is set to True, the form of the dimension string will be standardized.
        For example:  'LT/TT' would be converted to 'L/T' and the ordering of the dimension
        characters will be sorted to a standard order (MLIDKQTA).  This allows for the direct
        comparison of variable unit dimensions.


Returns:
    A string describing the dimensionality of the variable.


See also:
    `EnSight units &lt;https://nexusdemo.ensight.com/docs/python/html/Python.html?ENS_UNITSSchema.html&gt;`_

</description>
</override>

<override namespace="ensight.objs.ENS_GLOBALS.get_unit_conversion">
<signature>(from_system: str, to_system: str,
            dimensionality: str) -> Tuple[float, float]</signature>
<paramnames>["from_system", "to_system", "dimensionality"]</paramnames>
<description>
Return the linear conversion parameters for converting a variable from one unit system to
another.


This method will return the M and B linear equation parameters for the equation:
:samp:`y = Mx + b` that can be used to convert an entity of the dimensionality specified by
dimension_string (e.g. L/TT) from the first unit system to the second (e.g. "SI" to "BIN").
If the conversion fails, this function will raise an exception.  Otherwise,  it returns a
tuple of two floats. The list of valid unit systems can be obtained using:
:samp:`ensight.objs.core.unit_system()`.


Args:
    from_system:
        The unit system to convert from.
    to_system:
        The unit system to convert to.
    dimensionality:
        The unit quantity dimension string to convert.
        See: :meth:`pyensight.ens_globals.ENS_GLOBALS.get_unit_dimensions`


Returns:
    A string describing the dimensionality of the variable.


Examples:
    ::

        # An example use case for a volume variable from the current unit system to BFT might be:
        var_dims = ensight.objs.core.get_unit_dimensions(ensight.objs.core.VARIABLES['EleSize'][0])
        unit_system = ensight.objs.core.unit_system()[0]
        print(ensight.objs.core.get_unit_conversion(unit_system, "BFT", var_dims))

        # Outputs:
        (35.31466672148858, 0.0)


See also:
    `EnSight units &lt;https://nexusdemo.ensight.com/docs/python/html/Python.html?ENS_UNITSSchema.html&gt;`_

</description>
</override>

<override namespace="ensight.objs.ENS_GLOBALS.generate_uuid">
<signature>() -> str</signature>
<paramnames>[]</paramnames>
<description>
Generate a new UUID.


This method will generate and return a new GUID.


Returns:
    A UUID string.


Examples:
    ::

        ensight.objs.core.generate_uuid()
        'e8f00942-c733-11ed-a3ec-ebb53f2a5203'


</description>
</override>

<override namespace="ensight.objs.ENS_GLOBALS.find_objs">
<signature>(list: Union["ENS_GROUP", list] = [], filter: Optional[dict] = None,
            group: int = 0, recurse: int = 0, depth: int = -1,
            types: Optional[list] = None) -> Union["ENS_GROUP", list]</signature>
<paramnames>["list=", "filter=", "group=", "recurse=", "depth=", "types="]</paramnames>
<description>
Search an object (tree) for objects that match a specific criteria.


This method walks an array of objects or an ENS_GROUP rooted object tree, looking for
objects that meet the specified filters. The object tree to be searched is passed via
'list', which can be a Python list or a ENS_GROUP subclass. The method will walk all
of the objects in the list and all the children in the groups.

Once the algorithm finds an object, it will apply filter. The first filter is the
'types' list. This specifies a list of allowable type objects (e.g. ensight.objs.ENS_PART).
Only objects of the types in the list are returned. Second, is the 'filter' dictionary.
This is a dictionary keyed by attribute enums. The algorithm gets the attribute value
for the specified enum (if the enum does not exist, the object is not selected) and
compares it to the value of the key in the dictionary. If the value comparisons fail, the
object is not selected. Note: the algorithm uses the cmp() method on the values in the
dictionary to make the comparison. Thus, comparisons other than equality can be
implemented using objects with custom cmp() methods.

By default, the routine returns a Python list of objects, but group=1 can be specified to
return a user selection group object containing the objects that would be in the list. The
group option makes it easy to change attributes in bulk on the objects. It also makes it
possible to access a 'ensobjlist' interface (group.CHILDREN is an 'ensobjlist' instance)
which includes a useful 'find()' method as well. The depth option controls the depth to
which the method is allowed to recurse. A value of -1 puts no limits on the recursion.


Args:
    list:
        A list of objects or an ENS_GROUP instance.
    filter:
        A dictionary created by ENSOBJ attributes as key and example attribute values as the
        dictionary values. For example, :samp:`filter=dict(VISIBLE=True)` will select only objects
        that have a VISIBLE attribute with the value True.  If no dictionary is provided, the
        filter check is not applied.
    group:
        By default, return a list of matching objects.  If group is set to 1, return an ENS_GROUP
        instance instead.  This can be useful for chaining operations, but it is not functional
        in the pyensight interface.
    recurse:
        By default, only the objects in 'list' (or the children of an ENS_GROUP) are checked.
        If recurse is set to 1, all objects supporting the CHILDREN attribute will be recursively
        checked as well.
    depth:
        This can be used to limit the depth of recursion (if recurse is set to 1).  The default
        value (-1) will not limit recursion at all.  Otherwise, the maximum depth of the search
        is limited to the value of this keyword.
    types:
        This is set to a list of class objects that the search is limited to.  If unset, all
        classes are allowed.


Returns:
    A list or ENS_GROUP object of the matched objects.



The find_objs() method can be used in a large number of ways. Some common examples are
illustrated here. Note also that: ensight.objs.core.find_objs(...,group=1).CHILDREN will
return an ensobjlist containing the objects returned by find_objs().


Examples:
    ::

        # find all PART objects in the current case
        l = ensight.objs.core.find_objs(ensight.objs.core.CURRENTCASE,
                                        types=[ensight.objs.ENS_PART], recurse=1)


        # find all non VISIBLE parts as a group object
        g = ensight.objs.core.find_objs(core.PARTS,
                                        filter={ensight.objs.enums.VISIBLE: False}, group=1)
        # and make them all visible
        g.setchildattr(ensight.objs.enums.VISIBLE, True)

        # find all the VISIBLE, CLIP parts currently selected
        d = {ensight.objs.enums.VISIBLE: True, ensight.objs.enums.PARTTYPE: ensight.PART_CLIP_PLANE}
        l = ensight.objs.core.find_objs(ensight.objs.core.selection(), filter=d)

        # define a class with a custom __cmp__ method
        class strstr():
            def __init__(self, value):
                self._v = value

            def __cmp__(self, other):
                if other.find(self._v) &gt;= 0:
                    return 0
                return 1

            def __eq__(self, other):
                return other.find(self._v) &gt;= 0

            def __ne__(self, other):
                return other.find(self._v) &lt; 0

            def __lt__(self, other):
                return False

            def __gt__(self, other):
                return False

            def __le__(self, other):
                return other.find(self._v) &gt;= 0

            def __ge__(self, other):
                return other.find(self._v) &gt;= 0

        # find all parts in the current case that have "Block" in their DESCRIPTION
        # find_objs() will only use the __eq__() method, the others are there for completeness
        d = {ensight.objs.enums.DESCRIPTION: strstr("Block")}
        l = ensight.objs.core.find_objs(ensight.objs.core.CURRENTCASE, filter=d,
                                        types=[ensight.objs.ENS_PART], recurse=1)

        # define a pure comparison case to see if a variable is valid for a case
        class casevar():
            def __cmp__(self, other):
                if other[ensight.objs.core.CURRENTCASE[0].CASENUMBER]:
                    return 0
                return 1

            def __eq__(self, other):
                return other[ensight.objs.core.CURRENTCASE[0].CASENUMBER]

            def __ne__(self, other):
                return not other[ensight.objs.core.CURRENTCASE[0].CASENUMBER]

            def __lt__(self, other):
                return False

            def __gt__(self, other):
                return False

            def __le__(self, other):
                return other[ensight.objs.core.CURRENTCASE[0].CASENUMBER]

            def __ge__(self, other):
                return other[ensight.objs.core.CURRENTCASE[0].CASENUMBER]


        # find active, scalar variables defined for the current case
        d = {ensight.objs.enums.EXIST_CASE: casevar(), ensight.objs.enums.ACTIVE: 1,
             ensight.objs.enums.VARTYPE: ensight.objs.enums.ENS_VAR_SCALAR}
        g = ensight.objs.core.find_objs(ensight.objs.core.VARIABLES, filter=d)

        # Define a class that defines __cmp__ to be the "find" operation on a list
        class multival():
            def __init__(self,lst):
                self._list = lst

            def __cmp__(self,other):
                if self._list.count(other):
                    return 0
                return 1

            def __eq__(self, other):
                return self._list.count(other) &gt; 0

            def __ne__(self, other):
                return self._list.count(other) &lt;= 0

            def __gt__(self, other):
                return False

            def __lt__(self, other):
                return False

            def __ge__(self, other):
                return self._list.count(other) > 0

            def __le__(self, other):
                return self._list.count(other) > 0

        # use it to find the parts with descriptions that are in a list
        f = {ensight.objs.enums.DESCRIPTION: multival(["engine","windshields"])}
        parts = ensight.objs.core.find_objs(ensight.objs.core.PARTS, filter=f)


</description>
</override>

</docstrings>
