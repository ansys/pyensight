<docstrings>
<override namespace="ensight.solution_time.#_of_cycles">
<description>
Sets the number of cycles of cyclic transient data.  If the first and last time steps represent the same data, one can effectively increase the apparent number of computed time steps, by using this command.

| This is especially useful for things like pathline generation, (where you can only trace as long as you have transient steps) or transient animation that is synchronized to the data.

Args:
    p0:
        &#x27;num&#x27; number of times to cycle the given transient data (default is 1)

Examples:
    ::

        #
        # This sets several of the attributes using time steps
        # (Including having the data cycle twice)
        #
        ensight.solution_time.begin_step(0)
        ensight.solution_time.end_step(16)
        ensight.solution_time.current_step(0.0000e+00)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(2)
        ensight.solution_time.increment(1.0000e+00)
        ensight.solution_time.show_as(&quot;step&quot;)
        ensight.solution_time.update_type(&quot;discrete&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.begin_simtime">
<description>
Sets the solution time to be used as the beginning/ending time for subsequent time use.

| This is used when the &quot;solution_time: show_as&quot; command is set to &quot;time&quot;.  Also, it will be truncated to a solution time directly associated with a time step if &quot;solution_time: update_type&quot; is set to &quot;discrete&quot;.
| Can be greater/lesser or equal to the smallest/largest time available.

Args:
    p0:
        &#x27;time&#x27; solution time to use as the beginning/ending time

Examples:
    ::

        #
        # This sets several of the attributes using simulation time
        #
        ensight.solution_time.show_as(&quot;time&quot;)
        ensight.solution_time.update_type(&quot;continuous&quot;)
        ensight.solution_time.begin_simtime(0.0000e+00)
        ensight.solution_time.end_simtime(1.6000e+01)
        ensight.solution_time.current_simtime(9.0000e+00)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(2.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.end_simtime">
<description>
Sets the solution time to be used as the beginning/ending time for subsequent time use.

| This is used when the &quot;solution_time: show_as&quot; command is set to &quot;time&quot;.  Also, it will be truncated to a solution time directly associated with a time step if &quot;solution_time: update_type&quot; is set to &quot;discrete&quot;.
| Can be greater/lesser or equal to the smallest/largest time available.

Args:
    p0:
        &#x27;time&#x27; solution time to use as the beginning/ending time

Examples:
    ::

        #
        # This sets several of the attributes using simulation time
        #
        ensight.solution_time.show_as(&quot;time&quot;)
        ensight.solution_time.update_type(&quot;continuous&quot;)
        ensight.solution_time.begin_simtime(0.0000e+00)
        ensight.solution_time.end_simtime(1.6000e+01)
        ensight.solution_time.current_simtime(9.0000e+00)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(2.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.begin_step">
<description>
Sets the time step to be used as the beginning/ending time step for subsequent time use.

| This is used when the &quot;solution_time: show_as&quot; command is set to &quot;step&quot;.
| Can be greater/lesser or equal to the smallest/largest time step available.

Args:
    p0:
        &#x27;step&#x27; time step to use as the beginning/ending time step

Examples:
    ::

        #
        # This sets several of the attributes using time steps
        #
        ensight.solution_time.show_as(&quot;step&quot;)
        ensight.solution_time.update_type(&quot;discrete&quot;)
        ensight.solution_time.begin_step(0)
        ensight.solution_time.end_step(16)
        ensight.solution_time.current_step(0)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.end_step">
<description>
Sets the time step to be used as the beginning/ending time step for subsequent time use.

| This is used when the &quot;solution_time: show_as&quot; command is set to &quot;step&quot;.
| Can be greater/lesser or equal to the smallest/largest time step available.

Args:
    p0:
        &#x27;step&#x27; time step to use as the beginning/ending time step

Examples:
    ::

        #
        # This sets several of the attributes using time steps
        #
        ensight.solution_time.show_as(&quot;step&quot;)
        ensight.solution_time.update_type(&quot;discrete&quot;)
        ensight.solution_time.begin_step(0)
        ensight.solution_time.end_step(16)
        ensight.solution_time.current_step(0)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.current_simtime">
<description>
Sets the current simulation time.  Must be between the beginning time and the ending time.

| This is used when the &quot;solution_time: show_as&quot; command is set to &quot;time&quot;.

Args:
    p0:
        &#x27;time&#x27; The simulation time to use as the current time. If &quot;solution_time: update_type&quot; is &quot;continuous&quot;, this can be set to be any time between the beginning and ending times, even if it lies between data points (interpolation will take place).  If the &quot;solution_time: update_type&quot; is &quot;discrete&quot;, this should be the time associated with a time step.

Examples:
    ::

        #
        # This sets several of the attributes using simulation time
        #
        ensight.solution_time.show_as(&quot;time&quot;)
        ensight.solution_time.update_type(&quot;continuous&quot;)
        ensight.solution_time.begin_simtime(0.0000e+00)
        ensight.solution_time.end_simtime(1.6000e+01)
        ensight.solution_time.current_simtime(9.0000e+00)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(2.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.current_step">
<description>
Sets the current time step.  Must be between the beginning time step and the ending time step.

Args:
    p0:
        &#x27;step&#x27; The time step to use as the current time step. If &quot;solution_time: update_type&quot; is &quot;continuous&quot;, this can be float and thus can be set to be fractionally between time steps (interpolation will take place).  If the &quot;solution_time: update_type&quot; is &quot;discrete&quot;, this should be an integer.

Examples:
    ::

        #
        # This sets several of the attributes using time steps,
        # but the current is set 40% between steps 2 and 3.
        #
        ensight.solution_time.show_as(&quot;step&quot;)
        ensight.solution_time.update_type(&quot;continuous&quot;)
        ensight.solution_time.begin_step(0)
        ensight.solution_time.end_step(16)
        ensight.solution_time.current_step(2.4)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.increment">
<description>
Sets the number of steps that are moved when the solution time dialog time stepper buttons are clicked.

| This is a user interface attribute.

Args:
    p0:
        &#x27;step_by&#x27; number of time steps to advance by or decrease by with one click of the solution time stepper buttons

Examples:
    ::

        #
        # This sets several of the attributes using simulation time
        # (but at the end it sets the stepper button increment)
        #
        ensight.solution_time.show_as(&quot;time&quot;)
        ensight.solution_time.update_type(&quot;continuous&quot;)
        ensight.solution_time.begin_simtime(0.0000e+00)
        ensight.solution_time.end_simtime(1.6000e+01)
        ensight.solution_time.current_simtime(9.0000e+00)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(2.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.master_timeline">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.play_backward">
<description>
Causes the model to be displayed backward/forward through time.

| Is only in effect when the application is idle.

Examples:
    ::

        ensight.solution_time.play_backward()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.play_forward">
<description>
Causes the model to be displayed backward/forward through time.

| Is only in effect when the application is idle.

Examples:
    ::

        ensight.solution_time.play_backward()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.select_all_timesteps">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.show_as">
<description>
Sets method to use for specifying time - either as solution time directly or as time steps of data.

Args:
    p0:
        &#x27;method&#x27;

        * step
        * time

Examples:
    ::

        #
        # This sets several of the attributes using simulation time
        #
        ensight.solution_time.show_as(&quot;time&quot;)
        ensight.solution_time.update_type(&quot;continuous&quot;)
        ensight.solution_time.begin_simtime(0.0000e+00)
        ensight.solution_time.end_simtime(1.6000e+01)
        ensight.solution_time.current_simtime(9.0000e+00)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(2.0000e+00)
        #
        # But here we change it to use time steps
        #
        ensight.solution_time.show_as(&quot;step&quot;)
        ensight.solution_time.update_type(&quot;discrete&quot;)
        ensight.solution_time.begin_step(0)
        ensight.solution_time.end_step(16)
        ensight.solution_time.current_step(5)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.step_backward">
<description>
Causes the model to be displayed at previous/next time.

| This command is not generated by the EnSight GUI, but is intended for use with batch or context operations where the time of the first step could vary from model to model.

Examples:
    ::

        ensight.solution_time.step_backward()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.step_forward">
<description>
Causes the model to be displayed at previous/next time.

| This command is not generated by the EnSight GUI, but is intended for use with batch or context operations where the time of the first step could vary from model to model.

Examples:
    ::

        ensight.solution_time.step_backward()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.stop">
<description>
Stops the model from being displayed through time.

Examples:
    ::

        ensight.solution_time.stop()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.time_annotation">
<description>
Sets whether time annotation will automatically be displayed on the screen during animation.

| None.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        ensight.solution_time.time_annotation(&quot;ON&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.timeset_between">
<description>
When the current time lies between the steps of a given timeset, this command sets how to handle the situation in the span.

Args:
    p0:
        &#x27;method&#x27;

        * undefined
        * interpolate
        * nearest
        * left
        * right

Examples:
    ::

        #
        # Selecting the timeset
        #
        ensight.solution_time.timeset_select(2)
        #
        # Setting the timeset span handling methods
        # (Note that we will interpolate if between)
        #
        ensight.solution_time.timeset_leftof(&quot;undefined&quot;)
        ensight.solution_time.timeset_between(&quot;interpolate&quot;)
        ensight.solution_time.timeset_rightof(&quot;nearest&quot;)
        #
        # Update timesets and model display
        #
        ensight.solution_time.timeset_update()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.timeset_leftof">
<description>
When the current time lies before the beginning step of a given timeset, this command sets how to handle the situation.

| The geometry and each variable can be specified according to its own timeset, with different beginning and ending times and number of steps. These timesets are combined into the solution time range in the solution dialog. But, with this general capability comes the need to know what to do when a current time lies outside the extents of, or between the steps of a given timeset.

Args:
    p0:
        &#x27;method&#x27;

        * undefined
        * nearest

Examples:
    ::

        #
        # Selecting the timeset
        #
        ensight.solution_time.timeset_select(2)
        #
        # Setting the timeset span handling methods
        # (Note that we will treat as undefined if left of)
        #
        ensight.solution_time.timeset_leftof(&quot;undefined&quot;)
        ensight.solution_time.timeset_between(&quot;interpolate&quot;)
        ensight.solution_time.timeset_rightof(&quot;nearest&quot;)
        #
        # Update timesets and model display
        #
        ensight.solution_time.timeset_update()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.timeset_rightof">
<description>
When the current time lies after the ending step of a given timeset, this command sets how to handle the situation.

| The geometry and each variable can be specified according to its own timeset, with different beginning and ending times and number of steps. These timesets are combined into the solution time range in the solution dialog. But, with this general capability comes the need to know what to do when a current time lies outside the extents of, or between the steps of a given timeset.

Args:
    p0:
        &#x27;method&#x27;

        * undefined
        * nearest

Examples:
    ::

        #
        # Selecting the timeset
        #
        ensight.solution_time.timeset_select(2)
        #
        # Setting the timeset span handling methods
        # (Note that we will treat as nearest if right of)
        #
        ensight.solution_time.timeset_leftof(&quot;undefined&quot;)
        ensight.solution_time.timeset_between(&quot;interpolate&quot;)
        ensight.solution_time.timeset_rightof(&quot;nearest&quot;)
        #
        # Update timesets and model display
        #
        ensight.solution_time.timeset_update()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.timeset_select">
<description>
Selects the timeset to modify.

Args:
    p0:
        &#x27;ts_num&#x27; timeset number

Examples:
    ::

        #
        # Selecting the timeset
        #
        ensight.solution_time.timeset_select(2)
        #
        # Setting the timeset span handling methods
        # (Note that we will treat as nearest if right of)
        #
        ensight.solution_time.timeset_leftof(&quot;undefined&quot;)
        ensight.solution_time.timeset_between(&quot;interpolate&quot;)
        ensight.solution_time.timeset_rightof(&quot;nearest&quot;)
        #
        # Update timesets and model display
        #
        ensight.solution_time.timeset_update()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.timeset_update">
<description>
Updates the selected timeset and any associated display of the model according to the span handling methods specified.

Examples:
    ::

        #
        # Selecting the timeset
        #
        ensight.solution_time.timeset_select(2)
        #
        # Setting the timeset span handling methods
        # (Note that we will treat as nearest if right of)
        #
        ensight.solution_time.timeset_leftof(&quot;undefined&quot;)
        ensight.solution_time.timeset_between(&quot;interpolate&quot;)
        ensight.solution_time.timeset_rightof(&quot;nearest&quot;)
        #
        # Update timesets and model display
        #
        ensight.solution_time.timeset_update()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.update_to_current">
<description>
Causes the display and all associated computations of the model to be updated to the currently specified time or step.

Examples:
    ::

        #
        # This sets several of the attributes using simulation time
        #
        ensight.solution_time.show_as(&quot;time&quot;)
        ensight.solution_time.update_type(&quot;continuous&quot;)
        ensight.solution_time.begin_simtime(0.0000e+00)
        ensight.solution_time.end_simtime(1.6000e+01)
        ensight.solution_time.current_simtime(9.0000e+00)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(2.0000e+00)
        #
        # But here we change it to use time steps
        #
        ensight.solution_time.show_as(&quot;step&quot;)
        ensight.solution_time.update_type(&quot;discrete&quot;)
        ensight.solution_time.begin_step(0)
        ensight.solution_time.end_step(16)
        ensight.solution_time.current_step(5)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.update_to_first">
<description>
Causes the display and all associated computations of the model to be updated to the first time or step of the model.

| This command is not generated by the EnSight GUI, but is intended for use with batch or context operations where the time of the first step could vary from model to model.

Examples:
    ::

        ensight.solution_time.update_to_first()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.update_to_last">
<description>
Causes the display and all associated computations of the model to be updated to the last time or step of the model.

| This command is not generated by the EnSight GUI, but is intended for use with batch or context operations where the time of the last step could vary from model to model.

Examples:
    ::

        ensight.solution_time.update_to_last()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.update_type">
<description>
Sets whether times or time steps can be specified between the data steps in the model, thus causing interpolation to be needed.

| This command and &quot;solution_time: show_as&quot; combine to control whether interpolation will be needed.

Args:
    p0:
        &#x27;method&#x27;

        * discrete
        * continuous

Examples:
    ::

        #
        # This sets several of the attributes using simulation time
        #
        ensight.solution_time.show_as(&quot;time&quot;)
        ensight.solution_time.update_type(&quot;continuous&quot;)
        ensight.solution_time.begin_simtime(0.0000e+00)
        ensight.solution_time.end_simtime(1.6000e+01)
        ensight.solution_time.current_simtime(9.0000e+00)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(2.0000e+00)
        #
        # But here we change it to use time steps
        #
        ensight.solution_time.show_as(&quot;step&quot;)
        ensight.solution_time.update_type(&quot;discrete&quot;)
        ensight.solution_time.begin_step(0)
        ensight.solution_time.end_step(16)
        ensight.solution_time.current_step(5)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.solution_time.zoomout">
<description>
Resets the begin and end steps (or begin and end simtimes) to the widest possible settings.

| This may be desirable after one has modified (narrowed) the begin and end steps or time for a given temporary purpose.

Examples:
    ::

        ensight.solution_time.show_as(&quot;step&quot;)
        ensight.solution_time.update_type(&quot;discrete&quot;)
        ensight.solution_time.begin_step(3)
        ensight.solution_time.end_step(12)
        ensight.solution_time.current_step(5)
        ensight.solution_time.update_to_current()
        ensight.solution_time.number_of_cycles(1)
        ensight.solution_time.increment(1.0000e+00)
        #
        # One could load a flipbook or something like
        # that at this point, using the narrowed range
        # of 3 to 12.  Then could use the next command
        # to get the range back to 0 to 16
        #
        ensight.solution_time.zoomout()

Returns:
    zero on success, non-zero on error
</description>
</override>
</docstrings>
