<docstrings>
<override namespace="ensight.viewport_bounds.auto_size">
<description>
When geometry changes the bounds display will resize if this toggle is set

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.auto_size(&quot;OFF&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_height">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_linewidth">
<description>
Set the line width for the bounds axis

Args:
    p0:
        &#x27;line_width&#x27; the pixel width for the axis

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.visible(&quot;ON&quot;)
        ensight.viewport_bounds.axis_linewidth(2)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_rgb">
<description>
Set the color for the bounds axis

Args:
    p0:
        &#x27;red_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p1:
        &#x27;grn_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p2:
        &#x27;blu_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.visible(&quot;ON&quot;)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_width">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_format">
<description>
Specifies the format to be used for labels along the x/y/z axis

Args:
    p0:
        &#x27;format&#x27; may be any valid C language format string

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_format(&quot;%.2f&quot;)
        ensight.viewport_bounds.axis_y_format(&quot;%g&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_format">
<description>
Specifies the format to be used for labels along the x/y/z axis

Args:
    p0:
        &#x27;format&#x27; may be any valid C language format string

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_format(&quot;%.2f&quot;)
        ensight.viewport_bounds.axis_y_format(&quot;%g&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_format">
<description>
Specifies the format to be used for labels along the x/y/z axis

Args:
    p0:
        &#x27;format&#x27; may be any valid C language format string

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_format(&quot;%.2f&quot;)
        ensight.viewport_bounds.axis_y_format(&quot;%g&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_gridextentloc">
<description>
Specifies which bounds will receive grids and subgrid lines

Args:
    p0:
        &#x27;extent&#x27;

        * Can be any of the following:
        * min
        * max
        * both

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_gridextentloc(&quot;both&quot;)
        ensight.viewport_bounds.axis_y_gridextentloc(&quot;min&quot;)
        ensight.viewport_bounds.axis_z_gridextentloc(&quot;max&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_gridextentloc">
<description>
Specifies which bounds will receive grids and subgrid lines

Args:
    p0:
        &#x27;extent&#x27;

        * Can be any of the following:
        * min
        * max
        * both

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_gridextentloc(&quot;both&quot;)
        ensight.viewport_bounds.axis_y_gridextentloc(&quot;min&quot;)
        ensight.viewport_bounds.axis_z_gridextentloc(&quot;max&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_gridextentloc">
<description>
Specifies which bounds will receive grids and subgrid lines

Args:
    p0:
        &#x27;extent&#x27;

        * Can be any of the following:
        * min
        * max
        * both

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_gridextentloc(&quot;both&quot;)
        ensight.viewport_bounds.axis_y_gridextentloc(&quot;min&quot;)
        ensight.viewport_bounds.axis_z_gridextentloc(&quot;max&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_gridtype">
<description>
Set the line type for the x/y/z grid bounds

| If grid, the line type is specified via the viewport_bounds: grid_linetype command

Args:
    p0:
        &#x27;grid_type&#x27;

        * Can be any of the following:
        * none
        * grid
        * tick

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_gridtype(&quot;solid&quot;)
        ensight.viewport_bounds.axis_y_gridtype(&quot;none&quot;)
        ensight.viewport_bounds.axis_z_gridtype(&quot;tick&quot;)
        ensight.viewport_bounds.grid_linetype(&quot;solid&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_gridtype">
<description>
Set the line type for the x/y/z grid bounds

| If grid, the line type is specified via the viewport_bounds: grid_linetype command

Args:
    p0:
        &#x27;grid_type&#x27;

        * Can be any of the following:
        * none
        * grid
        * tick

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_gridtype(&quot;solid&quot;)
        ensight.viewport_bounds.axis_y_gridtype(&quot;none&quot;)
        ensight.viewport_bounds.axis_z_gridtype(&quot;tick&quot;)
        ensight.viewport_bounds.grid_linetype(&quot;solid&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_gridtype">
<description>
Set the line type for the x/y/z grid bounds

| If grid, the line type is specified via the viewport_bounds: grid_linetype command

Args:
    p0:
        &#x27;grid_type&#x27;

        * Can be any of the following:
        * none
        * grid
        * tick

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_gridtype(&quot;solid&quot;)
        ensight.viewport_bounds.axis_y_gridtype(&quot;none&quot;)
        ensight.viewport_bounds.axis_z_gridtype(&quot;tick&quot;)
        ensight.viewport_bounds.grid_linetype(&quot;solid&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_labelaxisloc">
<description>
Specifies the location for the x/y/z axis labels for bounds display

| When label_location is &quot;all&quot;, the number of labels is controlled by the viewport_bounds: axis_x/y/z_numgrid command

Args:
    p0:
        &#x27;label_location&#x27;

        * Can be any of the following:
        * none
        * all
        * beg_end

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_min(0.)
        ensight.viewport_bounds.axis_x_max(1.)
        ensight.viewport_bounds.axis_x_numgrid(5)
        ensight.viewport_bounds.axis_x_labelaxisloc(&quot;beg_end&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_labelaxisloc">
<description>
Specifies the location for the x/y/z axis labels for bounds display

| When label_location is &quot;all&quot;, the number of labels is controlled by the viewport_bounds: axis_x/y/z_numgrid command

Args:
    p0:
        &#x27;label_location&#x27;

        * Can be any of the following:
        * none
        * all
        * beg_end

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_min(0.)
        ensight.viewport_bounds.axis_x_max(1.)
        ensight.viewport_bounds.axis_x_numgrid(5)
        ensight.viewport_bounds.axis_x_labelaxisloc(&quot;beg_end&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_labelaxisloc">
<description>
Specifies the location for the x/y/z axis labels for bounds display

| When label_location is &quot;all&quot;, the number of labels is controlled by the viewport_bounds: axis_x/y/z_numgrid command

Args:
    p0:
        &#x27;label_location&#x27;

        * Can be any of the following:
        * none
        * all
        * beg_end

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_min(0.)
        ensight.viewport_bounds.axis_x_max(1.)
        ensight.viewport_bounds.axis_x_numgrid(5)
        ensight.viewport_bounds.axis_x_labelaxisloc(&quot;beg_end&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_labelextentloc">
<description>
Specifies which bounds axis will receive labels

Args:
    p0:
        &#x27;extent&#x27;

        * Can be any of the following:
        * min
        * max
        * both

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_labelextentloc(&quot;both&quot;)
        ensight.viewport_bounds.axis_y_labelextentloc(&quot;min&quot;)
        ensight.viewport_bounds.axis_z_labelextentloc(&quot;max&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_labelextentloc">
<description>
Specifies which bounds axis will receive labels

Args:
    p0:
        &#x27;extent&#x27;

        * Can be any of the following:
        * min
        * max
        * both

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_labelextentloc(&quot;both&quot;)
        ensight.viewport_bounds.axis_y_labelextentloc(&quot;min&quot;)
        ensight.viewport_bounds.axis_z_labelextentloc(&quot;max&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_labelextentloc">
<description>
Specifies which bounds axis will receive labels

Args:
    p0:
        &#x27;extent&#x27;

        * Can be any of the following:
        * min
        * max
        * both

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_labelextentloc(&quot;both&quot;)
        ensight.viewport_bounds.axis_y_labelextentloc(&quot;min&quot;)
        ensight.viewport_bounds.axis_z_labelextentloc(&quot;max&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_labelrgb">
<description>
Set the color for the x/y/z axis labels

Args:
    p0:
        &#x27;red_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p1:
        &#x27;grn_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p2:
        &#x27;blu_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_labelrgb(4.0000e-01,0.0000e+00,1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_labelrgb">
<description>
Set the color for the x/y/z axis labels

Args:
    p0:
        &#x27;red_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p1:
        &#x27;grn_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p2:
        &#x27;blu_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_labelrgb(4.0000e-01,0.0000e+00,1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_labelrgb">
<description>
Set the color for the x/y/z axis labels

Args:
    p0:
        &#x27;red_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p1:
        &#x27;grn_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p2:
        &#x27;blu_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_labelrgb(4.0000e-01,0.0000e+00,1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_min">
<description>
Sets the minimum value for the x/y/z axis

| If the length attribute is set to rounded the resulting min/max x/y/z value will be modified from the specified value

Args:
    p0:
        &#x27;min&#x27; the minimum axis value
    p1:
        &#x27;max&#x27; the maximum axis value

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_min(0.2)
        ensight.viewport_bounds.axis_x_max(0.6)
        ensight.viewport_bounds.axis_y_min(0.0)
        ensight.viewport_bounds.axis_y_max(1.0)
        ensight.viewport_bounds.axis_z_min(-1.)
        ensight.viewport_bounds.axis_z_max(1.)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_max">
<description>
Sets the minimum value for the x/y/z axis

| If the length attribute is set to rounded the resulting min/max x/y/z value will be modified from the specified value

Args:
    p0:
        &#x27;min&#x27; the minimum axis value
    p1:
        &#x27;max&#x27; the maximum axis value

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_min(0.2)
        ensight.viewport_bounds.axis_x_max(0.6)
        ensight.viewport_bounds.axis_y_min(0.0)
        ensight.viewport_bounds.axis_y_max(1.0)
        ensight.viewport_bounds.axis_z_min(-1.)
        ensight.viewport_bounds.axis_z_max(1.)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_min">
<description>
Sets the minimum value for the x/y/z axis

| If the length attribute is set to rounded the resulting min/max x/y/z value will be modified from the specified value

Args:
    p0:
        &#x27;min&#x27; the minimum axis value
    p1:
        &#x27;max&#x27; the maximum axis value

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_min(0.2)
        ensight.viewport_bounds.axis_x_max(0.6)
        ensight.viewport_bounds.axis_y_min(0.0)
        ensight.viewport_bounds.axis_y_max(1.0)
        ensight.viewport_bounds.axis_z_min(-1.)
        ensight.viewport_bounds.axis_z_max(1.)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_max">
<description>
Sets the minimum value for the x/y/z axis

| If the length attribute is set to rounded the resulting min/max x/y/z value will be modified from the specified value

Args:
    p0:
        &#x27;min&#x27; the minimum axis value
    p1:
        &#x27;max&#x27; the maximum axis value

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_min(0.2)
        ensight.viewport_bounds.axis_x_max(0.6)
        ensight.viewport_bounds.axis_y_min(0.0)
        ensight.viewport_bounds.axis_y_max(1.0)
        ensight.viewport_bounds.axis_z_min(-1.)
        ensight.viewport_bounds.axis_z_max(1.)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_min">
<description>
Sets the minimum value for the x/y/z axis

| If the length attribute is set to rounded the resulting min/max x/y/z value will be modified from the specified value

Args:
    p0:
        &#x27;min&#x27; the minimum axis value
    p1:
        &#x27;max&#x27; the maximum axis value

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_min(0.2)
        ensight.viewport_bounds.axis_x_max(0.6)
        ensight.viewport_bounds.axis_y_min(0.0)
        ensight.viewport_bounds.axis_y_max(1.0)
        ensight.viewport_bounds.axis_z_min(-1.)
        ensight.viewport_bounds.axis_z_max(1.)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_max">
<description>
Sets the minimum value for the x/y/z axis

| If the length attribute is set to rounded the resulting min/max x/y/z value will be modified from the specified value

Args:
    p0:
        &#x27;min&#x27; the minimum axis value
    p1:
        &#x27;max&#x27; the maximum axis value

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_min(0.2)
        ensight.viewport_bounds.axis_x_max(0.6)
        ensight.viewport_bounds.axis_y_min(0.0)
        ensight.viewport_bounds.axis_y_max(1.0)
        ensight.viewport_bounds.axis_z_min(-1.)
        ensight.viewport_bounds.axis_z_max(1.)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_numgrid">
<description>
Set the number of grid marks along the x/y/z axis

| If the length attribute is set to rounded the resulting number of grid marks will be modified from the specified value.

Args:
    p0:
        &#x27;num&#x27; the number of grid marks to be used

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_numgrid(5)
        ensight.viewport_bounds.axis_y_numgrid(3)
        ensight.viewport_bounds.axis_z_numgrid(7)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_numgrid">
<description>
Set the number of grid marks along the x/y/z axis

| If the length attribute is set to rounded the resulting number of grid marks will be modified from the specified value.

Args:
    p0:
        &#x27;num&#x27; the number of grid marks to be used

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_numgrid(5)
        ensight.viewport_bounds.axis_y_numgrid(3)
        ensight.viewport_bounds.axis_z_numgrid(7)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_numgrid">
<description>
Set the number of grid marks along the x/y/z axis

| If the length attribute is set to rounded the resulting number of grid marks will be modified from the specified value.

Args:
    p0:
        &#x27;num&#x27; the number of grid marks to be used

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.axis_rgb(1.0000e+00,0.0000e+00,1.0000e+00)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_numgrid(5)
        ensight.viewport_bounds.axis_y_numgrid(3)
        ensight.viewport_bounds.axis_z_numgrid(7)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_numsubgrid">
<description>
Set the number of subgrid marks along the x/y/z axis

| If the length attribute is set to rounded the resulting number of subgrid marks will be modified from the specified value.

Args:
    p0:
        &#x27;num&#x27; the number of subgrid marks to be used

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_numsubgrid(2)
        ensight.viewport_bounds.axis_y_numsubgrid(2)
        ensight.viewport_bounds.axis_z_numsubgrid(3)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_numsubgrid">
<description>
Set the number of subgrid marks along the x/y/z axis

| If the length attribute is set to rounded the resulting number of subgrid marks will be modified from the specified value.

Args:
    p0:
        &#x27;num&#x27; the number of subgrid marks to be used

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_numsubgrid(2)
        ensight.viewport_bounds.axis_y_numsubgrid(2)
        ensight.viewport_bounds.axis_z_numsubgrid(3)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_numsubgrid">
<description>
Set the number of subgrid marks along the x/y/z axis

| If the length attribute is set to rounded the resulting number of subgrid marks will be modified from the specified value.

Args:
    p0:
        &#x27;num&#x27; the number of subgrid marks to be used

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)
        ensight.viewport_bounds.axis_x_numsubgrid(2)
        ensight.viewport_bounds.axis_y_numsubgrid(2)
        ensight.viewport_bounds.axis_z_numsubgrid(3)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_orig">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_orig">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_x_sgridtype">
<description>
Set the line type for the x/y/z subgrid bounds

| If &quot;grid&quot;, the line type is specified via the viewport_bounds: subgrid_linetype command

Args:
    p0:
        &#x27;grid_type&#x27;

        * Can be any of the following:
        * none
        * grid
        * tick

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_sgridtype(&quot;solid&quot;)
        ensight.viewport_bounds.axis_y_sgridtype(&quot;none&quot;)
        ensight.viewport_bounds.axis_z_sgridtype(&quot;tick&quot;)
        ensight.viewport_bounds.subgrid_linetype(&quot;solid&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_y_sgridtype">
<description>
Set the line type for the x/y/z subgrid bounds

| If &quot;grid&quot;, the line type is specified via the viewport_bounds: subgrid_linetype command

Args:
    p0:
        &#x27;grid_type&#x27;

        * Can be any of the following:
        * none
        * grid
        * tick

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_sgridtype(&quot;solid&quot;)
        ensight.viewport_bounds.axis_y_sgridtype(&quot;none&quot;)
        ensight.viewport_bounds.axis_z_sgridtype(&quot;tick&quot;)
        ensight.viewport_bounds.subgrid_linetype(&quot;solid&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.axis_z_sgridtype">
<description>
Set the line type for the x/y/z subgrid bounds

| If &quot;grid&quot;, the line type is specified via the viewport_bounds: subgrid_linetype command

Args:
    p0:
        &#x27;grid_type&#x27;

        * Can be any of the following:
        * none
        * grid
        * tick

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.axis_x_sgridtype(&quot;solid&quot;)
        ensight.viewport_bounds.axis_y_sgridtype(&quot;none&quot;)
        ensight.viewport_bounds.axis_z_sgridtype(&quot;tick&quot;)
        ensight.viewport_bounds.subgrid_linetype(&quot;solid&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.dimension">
<description>
Set the bounds display to 2D or 3D.

| The 2D option is only available for 2D viewports and 3D viewports display in orthographic mode.

Args:
    p0:
        &#x27;dimension&#x27;

        * 2D
        * 3D

Examples:
    ::

        # 
        # turn on bounds display and make the bounds for
        # viewport 0 2D
        #
        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.dimension(&quot;2D&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.grid_linetype">
<description>
Specifies the type of grid lines that will be drawn for bounds display.

Args:
    p0:
        &#x27;line_type&#x27;

        * Can be any of the following:
        * solid
        * dotted
        * dash

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.visible(&quot;ON&quot;)
        ensight.viewport_bounds.grid_linewidth(2)
        ensight.viewport_bounds.grid_linetype(&quot;dotted&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.grid_linewidth">
<description>
Set the bounds axis grid line width

Args:
    p0:
        &#x27;width&#x27; specifies the width in pixels

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.visible(&quot;ON&quot;)
        ensight.viewport_bounds.grid_linewidth(2)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.grid_rgb">
<description>
Set the color for the bounds grid lines

Args:
    p0:
        &#x27;red_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p1:
        &#x27;grn_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p2:
        &#x27;blu_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.visible(&quot;ON&quot;)
        ensight.viewport_bounds.grid_linewidth(2)
        ensight.viewport_bounds.grid_rgb(0.5,1,0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.length">
<description>
Use min/max information as specified or use round numbers

Args:
    p0:
        &#x27;size_option&#x27;

        * as_specified
        * rounded

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.visible(&quot;ON&quot;)
        ensight.viewport_bounds.axis_linewidth(1)
        ensight.viewport_bounds.length(&quot;as_specified&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.subgrid_linetype">
<description>
Specifies the type of subgrid lines that will be drawn for bounds display.

Args:
    p0:
        &#x27;line_type&#x27;

        * Can be any of the following:
        * solid
        * dotted
        * dash

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.visible(&quot;ON&quot;)
        ensight.viewport_bounds.subgrid_linewidth(2)
        ensight.viewport_bounds.subgrid_linetype(&quot;dotted&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.subgrid_linewidth">
<description>
Set the bounds axis subgrid line width

Args:
    p0:
        &#x27;width&#x27; specifies the width in pixels

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.visible(&quot;ON&quot;)
        ensight.viewport_bounds.subgrid_linewidth(2)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.subgrid_rgb">
<description>
Set the color for the bounds subgrid lines

Args:
    p0:
        &#x27;red_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p1:
        &#x27;grn_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)
    p2:
        &#x27;blu_val&#x27; red, green, blue color components (must be between 0.0 and 1.0)

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.visible(&quot;ON&quot;)
        ensight.viewport_bounds.subgrid_linewidth(2)
        ensight.viewport_bounds.subgrid_rgb(0.5,0.5,0.5)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.transparency">
<description>
Sets the opaqueness for the bounds display

Args:
    p0:
        &#x27;value&#x27; opaqueness value
    p1:
        &#x27;value&#x27; opaqueness value

Examples:
    ::

        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(0)
        ensight.viewport_bounds.transparency(0.5)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport_bounds.visible">
<description>
Turn on bounds display for a viewport

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        #
        # turn on bounds display but turn the bounds off for viewport 1
        #
        ensight.view.bounds(&quot;ON&quot;)
        ensight.viewport.select_begin(1)
        ensight.viewport_bounds.visible(&quot;OFF&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
</docstrings>
