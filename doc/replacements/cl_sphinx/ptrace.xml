<docstrings>
<override namespace="ensight.ptrace.#_of_arrows">
<description>
Specify the number of arrowheads to show along particle traces.

| The number of arrowheads specified will be distributed along the entire length of each trace.

Args:
    p0:
        &#x27;number_of&#x27; number of the arrowheads shown along each trace

Examples:
    ::

        #
        # modifying an existing particle trace that has the default of
        # of 3 normal arrows per trace to be 5 cone arrows.
        #
        ensight.part.select_begin(2)
        ensight.part.modify_begin()
        ensight.ptrace.arrows(&quot;cone&quot;)
        ensight.ptrace.number_of_arrows(5)
        ensight.ptrace.arrow_size(0.15)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.add_bypart">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.add_bypartname">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.add_file">
<description>
Adds emitters (and thus more traces) to the current particle trace part(s) according to the time and locations as defined in the file.

Args:
    p0:
        &#x27;filename&#x27; The name of the emitter file

Examples:
    ::

        #
        # Add emitters to a currently defined particle trace part 3
        #
        #
        ensight.part.select_begin(3)
        ensight.ptrace.add_file(&quot;/tmp/emitter.file&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.add_net">
<description>
Add emitters (and thus more traces) to the current particle trace part(s) from

| Any existing particle trace parts can have emitters added to them. These trace parts must be selected, and the plane tool must be at the new position, before the addition.  The number of additional emitter points will be the product of num_in_x * num_in_y.

Args:
    p0:
        &#x27;num_in_x &#x27; number of equally spaced points in the x direction of the plane tool
    p1:
        &#x27;num_in_y&#x27; number of equally spaced points in the y direction of the plane tool

Examples:
    ::

        #
        # Getting the plane tool to the desired location
        #
        ensight.view_transf.plane(1,1.750000,2.700000,0.000000)
        ensight.view_transf.plane(2,13.000000,2.700000,0.000000)
        ensight.view_transf.plane(3,13.000000,9.500000,0.000000)
        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (others are the current defaults)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating 35 traces from the plane tool (becomes part 2)
        #
        ensight.ptrace.create_net(5,7)
        #
        # Moving the plane tool to a new location
        #
        ensight.tools.plane(&quot;ON&quot;)
        ensight.view_transf.function(&quot;plane&quot;)
        ensight.view_transf.scale(-0.522802,-1.195307,1.000000)
        ensight.view_transf.translate(-10.588167,-0.218373,0.000000)
        ensight.view_transf.function(&quot;global&quot;)
        #
        # Selecting the particle trace part to add to
        # and adding the 9 new emitters from which
        # more traces are made
        #
        ensight.part.select_begin(2)
        ensight.ptrace.add_net(3,3)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.add_pt">
<description>
Adds emitters (and thus more traces) to the current particle trace part(s) from the current location of the cursor (a point).

| Any existing particle trace part can have emitters added to them. These trace parts must be selected, and the cursor must be at the new location, before the addition.

Examples:
    ::

        #
        # Getting the cursor to the desired location
        #
        ensight.view_transf.cursor(-0.927830,1.474020,0.000000)
        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (others are the current defaults)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point (becomes part 2)
        #
        ensight.ptrace.create_pt()
        #
        # Moving the cursor to a new location
        #
        ensight.tools.cursor(&quot;ON&quot;)
        ensight.view_transf.function(&quot;cursor&quot;)
        ensight.view_transf.translate(-7.368053,-0.491341,0.000000)
        ensight.view_transf.function(&quot;global&quot;)
        #
        # Selecting the particle trace part to add to
        # and adding the new emitter from which another
        # trace is made
        #
        ensight.part.select_begin(2)
        ensight.ptrace.add_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.add_rake">
<description>
Add emitters (and thus more traces) to the current particle trace part(s) from the current line tool.

| Any existing particle trace part can have emitters added to them. These trace parts must be selected, and the line tool must be at the new position, before the addition.

Args:
    p0:
        &#x27;num_points&#x27; number of equally spaced points on the line to use as emitters

Examples:
    ::

        #
        # Getting the line tool to the desired location
        #
        ensight.view_transf.line(1,9.000000,6.000000,0.000000)
        ensight.view_transf.line(2,30.000000,6.000000,0.000000)
        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (others are the current defaults)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating 10 traces from a line tool (becomes part 2)
        #
        ensight.ptrace.create_rake(10)
        #
        # Moving the line tool to a new location
        #
        ensight.tools.line(&quot;ON&quot;)
        ensight.view_transf.function(&quot;line&quot;)
        ensight.view_transf.translate(-4.202520,4.531246,0.000000)
        ensight.view_transf.function(&quot;global&quot;)
        #
        # Selecting the particle trace part to add to
        # and adding the 6 new emitters from which more
        # traces are made
        #
        ensight.part.select_begin(2)
        ensight.ptrace.add_rake(6)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.add_surface_net">
<description>
Add emitters (and thus more traces) to the current particle trace part(s) from the grid of a screen box pick.

| The &quot;ptrace: surface_restricted&quot; command must be ON prior to this command.
| Any existing particle trace parts can have emitters added to them. These trace parts must be selected before the addition.
| The number of additional emitter points will be the product of num_in_x * num_in_y.

Args:
    p0:
        &#x27;num_in_x&#x27; number of equally spaced points in the x direction of the plane tool
    p1:
        &#x27;num_in_y&#x27; number of equally spaced points in the y direction of the plane tool
    p2:
        &#x27;x1&#x27; screen x coordinate of the first point on the diagonal of the box (0.0 to 1.0)
    p3:
        &#x27;y1&#x27; screen y coordinate of the first point on the diagonal of the box (0.0 to 1.0)
    p4:
        &#x27;x2 &#x27; screen x coordinate of the second point on the diagonal of the box (0.0 to 1.0)
    p5:
        &#x27;y2&#x27; screen y coordinate of the second point on the diagonal of the box (0.0 to 1.0)

Examples:
    ::

        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (surface_restricted must be on)
        #
        ensight.ptrace.begin()
        ensight.ptrace.surface_restricted(&quot;ON&quot;)
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating 35 surface restricted traces from
        # the box selection (becomes part 2)
        #
        ensight.ptrace.create_surface_net(5,7)
        #
        # Selecting the surface restricted particle trace
        # part to add to, and adding the 16 new emitters
        # from which more traces are made
        #
        ensight.part.select_begin(2)
        ensight.ptrace.create_surface_net(4,4,0.114734,0.424963,0.166667,0.362556)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.add_surface_pt">
<description>
Adds emitters (and thus more traces) to the current surface restricted particle trace part(s) from a screen point pick location.

| The &quot;ptrace: surface_restricted&quot; command must be ON prior to this command.  Any existing surface restricted particle trace part can have emitters added to them. These trace parts must be selected before the addition.

Args:
    p0:
        &#x27;screen_x&#x27; screen x coordinate (0.0 to 1.0)
    p1:
        &#x27;screen_y&#x27; screen y coordinate (0.0 to 1.0)

Examples:
    ::

        #
        # Getting the cursor to the desired location
        #
        ensight.view_transf.cursor(-0.927830,1.474020,0.000000)
        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (surface_restricted must be on)
        #
        ensight.ptrace.begin()
        ensight.ptrace.surface_restricted(&quot;ON&quot;)
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating surface restricted trace from a
        # screen location (becomes part 2)
        #
        ensight.ptrace.create_surface_pt(0.148551,0.484398)
        #
        # Selecting the particle trace part to add to
        # and adding a couple of new emitters from which
        # more traces are made
        #
        ensight.part.select_begin(2)
        ensight.ptrace.add_surface_pt(0.136473,0.646360)
        ensight.ptrace.add_surface_pt(0.193237,0.546805)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.add_surface_rake">
<description>
Add emitters (and thus more traces) to the current surface restricted particle trace part(s) from a screen pick rake location.

| The &quot;ptrace: surface_restricted&quot; command must be ON prior to this command. Any existing particle trace parts can have emitters added to them. These trace parts must be selected before the addition.

Args:
    p0:
        &#x27;num_points&#x27; number of equally spaced points on the line to use as emitters
    p1:
        &#x27;x1&#x27; screen x coordinate of the first end of the rake (0.0 to 1.0)
    p2:
        &#x27;y1&#x27; screen y coordinate of the first end of the rake (0.0 to 1.0)
    p3:
        &#x27;x2&#x27; screen x coordinate of the second end of the rake (0.0 to 1.0)
    p4:
        &#x27;y2&#x27; screen y coordinate of the second end of the rake (0.0 to1.0)

Examples:
    ::

        #
        # Getting the line tool to the desired location
        #
        ensight.view_transf.line(1,9.000000,6.000000,0.000000)
        ensight.view_transf.line(2,30.000000,6.000000,0.000000)
        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (surface_restricted must be on)
        #
        ensight.ptrace.begin()
        ensight.ptrace.surface_restricted(&quot;ON&quot;)
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating 10 surface restricted traces from
        # a rake pick location (becomes part 2)
        #
        ensight.ptrace.create_surface_rake(10,0.117150,0.540862,0.117150,0.442793)
        #
        # Selecting the particle trace part to add to
        # and adding 6 new emitters from which more
        # traces are made
        #
        ensight.part.select_begin(2)
        ensight.ptrace.add_surface_rake(6,0.129227,0.594354,0.188406,0.592868)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.animate">
<description>
Toggles particle trace animation on or off for selected traces.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        #
        # Selecting the trace(s) to animate
        #
        ensight.part.select_begin(7,8)
        #
        # Turning on the animation for the two selected trace parts
        #
        ensight.part.modify_begin()
        ensight.ptrace.animate(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.arrows">
<description>
Specify the type of arrowheads to show along particle traces.

| None.

Args:
    p0:
        &#x27;type&#x27;

        * none
        * cone
        * normal
        * triangles

Examples:
    ::

        #
        # modifying an existing particle trace that has the default of
        # of 3 normal arrows per trace to be 5 cone arrows.
        #
        ensight.part.select_begin(2)
        ensight.part.modify_begin()
        ensight.ptrace.arrows(&quot;cone&quot;)
        ensight.ptrace.number_of_arrows(5)
        ensight.ptrace.arrow_size(0.15)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.arrow_size">
<description>
Specify the size of arrowheads to show along particle traces.

| The size is according to the magnitude of the model coordinates.

Args:
    p0:
        &#x27;size&#x27; size of the arrowheads shown along each trace

Examples:
    ::

        #
        # modifying an existing particle trace that has the default of
        # of 3 normal arrows per trace to be 5 cone arrows.
        #
        ensight.part.select_begin(2)
        ensight.part.modify_begin()
        ensight.ptrace.arrows(&quot;cone&quot;)
        ensight.ptrace.number_of_arrows(5)
        ensight.ptrace.arrow_size(0.15)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.begin">
<description>
Delimit the modifications for particle trace attributes.

| These commands are used to set the attributes for particle trace part creation.

Args:
    p0:
        &#x27;ptrace_command&#x27; any of the various attribute changing &quot;ptrace:&quot; commands

Examples:
    ::

        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        #
        ensight.ptrace.begin()
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.end">
<description>
Delimit the modifications for particle trace attributes.

| These commands are used to set the attributes for particle trace part creation.

Args:
    p0:
        &#x27;ptrace_command&#x27; any of the various attribute changing &quot;ptrace:&quot; commands

Examples:
    ::

        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        #
        ensight.ptrace.begin()
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.component">
<description>
Specifies the contribution of the components of the flow field vector variable through which the particle trace will be integrated.

| The normal situation is to have all three set to 1.0, to get the true vector field.

Args:
    p0:
        &#x27;x_scal&#x27; scale factor to apply to the x, y, z components of the vector
    p1:
        &#x27;y_scal&#x27; scale factor to apply to the x, y, z components of the vector
    p2:
        &#x27;z_scal&#x27; scale factor to apply to the x, y, z components of the vector

Examples:
    ::

        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (the components are being set here)
        #
        ensight.ptrace.begin()
        ensight.ptrace.type(&quot;streamline&quot;)
        #
        # Create the particle trace with
        # the x and y components of the vector
        #
        ensight.ptrace.component(1.0000e+00,1.0000e+00,0.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_file">
<description>
Create particle traces from the current location of the line tool.

Args:
    p0:
        &#x27;filename&#x27; The name of the emitter file

Examples:
    ::

        #
        # Create particle traces through part 1 by releasing
        # emitters as defined in the given file
        #
        ensight.part.select_begin(1)
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.create_file(&quot;/tmp/emitter.file&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_net">
<description>
Create particle traces from the plane tool.

| The default attributes and/or any &quot;ptrace:&quot; attribute commands between &quot;ptrace: begin&quot; and &quot;ptrace: end&quot; commands are used for the trace creation.
| A parent part or parts (containing the flow field) must be selected prior to this command. You need the plane tool to be at the desired location.
| The number of emitter points will be the product of num_in_x * num_in_y.

Args:
    p0:
        &#x27;num_in_x &#x27; number of equally spaced points in the x direction of the plane tool
    p1:
        &#x27;num_in_y &#x27; number of equally spaced points in the y direction of the plane tool

Examples:
    ::

        #
        # Getting the plane tool to the desired location
        #
        ensight.view_transf.plane(1,1.750000,2.700000,0.000000)
        ensight.view_transf.plane(2,13.000000,2.700000,0.000000)
        ensight.view_transf.plane(3,13.000000,9.500000,0.000000)
        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1,3,4)
        #
        # Setting some attributes before creation
        # (others are the current defaults)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating 35 traces from the plane tool
        #
        ensight.ptrace.create_net(5,7)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_bypartname">
<description>
Create a particle trace from the nodes of a part, where the part is referred to by name.

| The default attributes and/or any &quot;ptrace:&quot; attribute commands between &quot;ptrace: begin&quot; and &quot;ptrace: end&quot; commands are used for the trace creation. A parent part or parts (containing the flow field) must be selected prior to this command. The number of emitter points will be the number of nodes in the part multiplied by the &quot;ptrace: emit_density&quot; value.

Args:
    p0:
        &#x27;part_name&#x27; name of the part whose nodes will be used as an emitter
    p1:
        &#x27;numemitpoints&#x27; number of emitters to use.  The minimum of this value and the number of nodes in the part will be used.

Examples:
    ::

        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1,3,4)
        #
        # Setting some attributes before creation
        # (others are the current defaults)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.ptrace.emit_density).
        ensight.ptrace.emit_density(1.0000e+00)
        ensight.ptrace.end()
        #
        # Creating traces from all the nodes of the part
        # entitled &quot;(CASE:Case 1)Clip_line&quot;
        #
        ensight.ptrace.create_bypartname(&quot;(CASE:Case&quot;,&quot;1)Clip_line&quot;,&quot;100&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_node_track">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_pt">
<description>
Create a particle trace from the current location of the cursor (a point).

| The default attributes and/or any &quot;ptrace:&quot; attribute commands between &quot;ptrace: begin&quot; and &quot;ptrace: end&quot; commands are used for the trace creation. A parent part or parts (containing the flow field) must be selected prior to this command, and you need the cursor to be at the desired location.

Examples:
    ::

        #
        # Getting the cursor to the desired location
        #
        ensight.view_transf.cursor(-0.927830,1.474020,0.000000)
        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1,3,4)
        #
        # Setting some attributes before creation
        # (others are the current defaults)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_rake">
<description>
Create particle traces from the current location of the line tool.

| The default attributes and/or any &quot;ptrace:&quot; attribute commands between &quot;ptrace: begin&quot; and &quot;ptrace: end&quot; commands are used for the trace creation. A parent part or parts (containing the flow field) must be selected prior to this command, and you need the line tool to be at the desired location.

Args:
    p0:
        &#x27;num_points&#x27; number of equally spaced points on the line to use as emitters

Examples:
    ::

        #
        # Getting the line tool to the desired location
        #
        ensight.view_transf.line(1,9.000000,6.000000,0.000000)
        ensight.view_transf.line(2,30.000000,6.000000,0.000000)
        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1,3,4)
        #
        # Setting some attributes before creation
        # (others are the current defaults)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating 10 traces from a line tool
        #
        ensight.ptrace.create_rake(10)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_surface_net">
<description>
Create surface restricted particle traces from a screen box pick.

| The &quot;ptrace: surface_restricted&quot; command must be ON prior to this command.
| The default attributes and/or any &quot;ptrace:&quot; attribute commands between &quot;ptrace: begin&quot; and &quot;ptrace: end&quot; commands are used for the trace creation. A parent part or parts (containing the flow field) must be selected prior to this command. The number of emitter points will be the product of num_in_x * num_in_y.

Args:
    p0:
        &#x27;num_in_x&#x27; number of equally spaced points in the x direction of the box pick
    p1:
        &#x27;num_in_y&#x27; number of equally spaced points in the y direction of the box pick
    p2:
        &#x27;x1&#x27; screen x coordinate of the first point on the diagonal of the box (0.0 to 1.0)
    p3:
        &#x27;y1&#x27; screen y coordinate of the first point on the diagonal of the box (0.0 to 1.0)
    p4:
        &#x27;x2&#x27; screen x coordinate of the second point on the diagonal of the box (0.0 to 1.0)
    p5:
        &#x27;y2&#x27; screen y coordinate of the second point on the diagonal of the box (0.0 to 1.0)

Examples:
    ::

        ensight.part.select_begin(1,3,4)
        #
        # Setting some attributes before creation
        # (surface_restricted must be on)
        #
        ensight.ptrace.begin()
        ensight.ptrace.surface_restricted(&quot;ON&quot;)
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating 35 traces from the box selection
        #
        ensight.ptrace.create_surface_net(5,7)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_surface_pt">
<description>
Create a surface restricted particle trace from a screen point pick location.

| The &quot;ptrace: surface_restricted&quot; command must be ON prior to this command.
| The default attributes and/or any &quot;ptrace:&quot; attribute commands between &quot;ptrace: begin&quot; and &quot;ptrace: end&quot; commands are used for the trace creation. A parent part or parts (containing the flow field) must be selected prior to this command.

Args:
    p0:
        &#x27;screen_x&#x27; screen x coordinate (0.0 to 1.0)
    p1:
        &#x27;screen_y&#x27; screen y coordinate (0.0 to 1.0)

Examples:
    ::

        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1,3,4)
        #
        # Setting some attributes before creation
        # (surface_restricted must be on)
        #
        ensight.ptrace.begin()
        ensight.ptrace.surface_restricted(&quot;ON&quot;)
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating surface restricted trace from a screen location
        #
        ensight.ptrace.create_surface_pt(0.148551,0.484398)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_surface_rake">
<description>
Create surface restricted particle traces from a screen pick rake location.

| The &quot;ptrace: surface_restricted&quot; command must be ON prior to this command.
| The default attributes and/or any &quot;ptrace:&quot; attribute commands between &quot;ptrace: begin&quot; and &quot;ptrace: end&quot; commands are used for the trace creation. A parent part or parts (containing the flow field) must be selected prior to this command.

Args:
    p0:
        &#x27;num_points&#x27; number of equally spaced points along the rake to use as emitters
    p1:
        &#x27;x1&#x27; screen x coordinate of the first end of the rake (0.0 to 1.0)
    p2:
        &#x27;y1&#x27; screen y coordinate of the first end of the rake (0.0 to 1.0)
    p3:
        &#x27;x2&#x27; screen x coordinate of the second end of the rake (0.0 to 1.0)
    p4:
        &#x27;y2&#x27; screen y coordinate of the second end of the rake (0.0 to 1.0)

Examples:
    ::

        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(1,3,4)
        #
        # Setting some attributes before creation
        # (surface_restricted must be on)
        #
        ensight.ptrace.begin()
        ensight.ptrace.surface_restricted(&quot;ON&quot;)
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating 10 traces from a screen rake location
        #
        ensight.ptrace.create_surface_rake(10,0.117150,0.540862,0.117150,0.442793)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_varmin_track">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.create_varmax_track">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.default_emit_bypart">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.default_emit_bypartname">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.default_emit_file">
<description>
Set the default filename for file emitters and sets the user interface Emit From option to be File.

Args:
    p0:
        &#x27;filename&#x27; The default emitter file name

Examples:
    ::

        #
        # Set the default file emitter
        #
        ensight.ptrace.default_emit_file(&quot;/tmp/emitter.file&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.default_emit_net">
<description>
Set the default number of x and y grid points for net emitters, and sets the user interface Emit From option to be Plane.

| Mainly used to set the default &quot;Emit From&quot; option in the user interface, but also sets the default number of x and y grid points. Any subsequent particle traces created using a net will use this unless changed specifically.

Args:
    p0:
        &#x27;num_in_x&#x27; number of emission points to be the default for x direction of net
    p1:
        &#x27;num_in_y&#x27; number of emission points to be the default for y direction of net

Examples:
    ::

        #
        # Set the default number of emission points
        # for nets to be 10 x 12 in this case
        #
        ensight.ptrace.default_emit_net(10,12)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.default_emit_pt">
<description>
Set the user interface Emit From option to be Cursor.

| Sets the default &quot;Emit From&quot; in the user interface.

Examples:
    ::

        ensight.ptrace.default_emit_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.default_emit_rake">
<description>
Set the default number of emission points for rake emitters, and sets the user interface Emit From option to be Line.

| Mainly used to set the default &quot;Emit From&quot; option in the user interface, but also sets the default number of rake emission points. Any subsequent particle traces created using a rake will use this unless changed specifically.

Args:
    p0:
        &#x27;num&#x27; the number of emission points to be the default for rakes

Examples:
    ::

        #
        # Set the default number of emission points
        # for rakes to be 10 in this case
        #
        ensight.ptrace.default_emit_rake(10)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.delete_emitter">
<description>
Remove emitters from a particle trace part (and their associated traces).

| The desired emitter for the particle trace part must be selected before this command is issued.

Examples:
    ::

        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(2)
        #
        # Selecting the emitter within the part
        # (in this case we will delete the first 3 emitters)
        #
        ensight.ptrace.select_emitter_begin(0,1,2)
        ensight.ptrace.delete_emitter()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.delta_time">
<description>
Specifies the time interval between emissions from the emitters.

| Particles will be traced starting at the current time step or the time specified with ptrace: start_time.  Additional particles will be released every &quot;emit_delta&quot; time units.
| Most useful for pathline generation.

Args:
    p0:
        &#x27;emit_delta&#x27; the time interval between emissions. (The default is 0.0, which will cause only the initial emission to take place

Examples:
    ::

        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (the delta_time is being set here, to emit
        #  every 2.5 time units)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.start_time(1.5000e+01)
        ensight.ptrace.delta_time(2.5000e+00)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.display_offset">
<description>
Sets the distance normal to the surface at which the surface restricted trace will be displayed. This can be used to avoid z-buffer display problems that arise because the trace lies in the same plane as the surface.

| A positive number moves the trace in the direction of the positive surface normal, while a negative number moves in the opposite direction.

Args:
    p0:
        &#x27;offset_distance&#x27; the distance normal to the surface at which to display the trace

Examples:
    ::

        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (the  display_offset for the surface restricted trace
        #  is being set here)
        #
        ensight.ptrace.begin()
        ensight.part.description(&quot;Particle trace part&quot;)
        ensight.ptrace.surface_restricted(&quot;ON&quot;)
        ensight.ptrace.variable_offset(1.0000e-01)
        ensight.ptrace.display_offset(-0.5000e+00)
        ensight.ptrace.total_time(2.0000e+02)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.emit_at_current_time">
<description>
Sets the emission time for a particle trace to be current time when the particle trace is created.  The particle trace is also updated whenever time is changed.

| While this flag is ON, the &quot;ptrace: start_time&quot; is not used.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (the emit_at_current_time flag is being set here)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_ballistic_coef">
<description>
If the massed_use_ballistic toggle is ON then this is the ballistic coefficient to use

Args:
    p0:
        &#x27;coef&#x27; ballistic coefficient

Examples:
    ::

        ensight.part.select_begin(2)
        ensight.part.modify_begin()
        ensight.ptrace.massed_buoyancy(&quot;OFF&quot;)
        ensight.ptrace.massed_use_ballistic(&quot;ON&quot;)
        ensight.ptrace.massed_ballistic_coef(0.01)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_buoyancy">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_coef_friction">
<description>
Set the coefficient of friction for use with the massed particle rebound capability

Args:
    p0:
        &#x27;friction&#x27; coefficient of friction

Examples:
    ::

        ensight.ptrace.select_default()
        ensight.ptrace.default_emit_pt()
        ensight.view_transf.cursor(7.1,6,0.)
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.ptrace.massed_rebound(&quot;ON&quot;)
        ensight.ptrace.massed_rebound_wallhits(4)
        ensight.ptrace.massed_coef_restitution(0.8)
        ensight.ptrace.massed_coef_friction(1.000000e-01)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_coef_restitution">
<description>
Set the coefficient of restitution for use with the massed particle rebound capability

Args:
    p0:
        &#x27;rebound&#x27; coefficient of restitution

Examples:
    ::

        ensight.ptrace.select_default()
        ensight.ptrace.default_emit_pt()
        ensight.view_transf.cursor(7.1,6,0.)
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.ptrace.massed_rebound(&quot;ON&quot;)
        ensight.ptrace.massed_rebound_wallhits(4)
        ensight.ptrace.massed_coef_restitution(0.8)
        ensight.ptrace.massed_coef_friction(1.000000e-01)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_drag">
<description>
Specify whether the drag force term is used in the massed-particle calculation.

| The default setting is ON.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command. Drag force term in the massed-particle momentum balance equation is computed according to the ptrace: massed_pressure_gradient setting.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Toggle on massed-particle drag force term
        # Specify default drag coefficient function table
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_drag(&quot;ON&quot;)
        ensight.ptrace.massed_drag_coefficient(&quot;none&quot;)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_drag_coefficient">
<description>
Specify the name of the drag coefficient function table to be used in the drag force term of the massed-particle calculation.

| The default setting is &quot;none&quot;.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.  This parameter is only used when the drag force term &quot;ptrace: massed_drag&quot; is toggled ON.
| Also the three options &quot;DragCoefPoly&quot;, &quot;DragCoefPower&quot;, and &quot;DragCoefTable1&quot;, are EnSight User-Defined Math Functions. These math functions are typically located under $CEI_HOME/ensight92/src/math_functions, and are compiled as libraries by the user, and then dynamically liked via the _UDMF environment variable.

Args:
    p0:
        &#x27;table_name&#x27; none
    p1:
        &#x27;table_name&#x27; DragCoefTable1
    p2:
        &#x27;table_name&#x27; DragCoefPower
    p3:
        &#x27;table_name&#x27; DragCoefPoly
    p4:
        &#x27;table_name&#x27; any User-Defined Math Function

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Toggle on massed-particle drag force term
        # Specify default drag coefficient function table
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_drag(&quot;ON&quot;)
        ensight.ptrace.massed_drag_coefficient(&quot;none&quot;)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()
        #
        # Change the drag coefficient function to use the power formulation
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_drag_coefficient(&quot;DragCoefPower&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_fluid_density">
<description>
Specify the density of the corresponding fluid field where the massed-particles are traced.

| The default setting for this parameter is the constant value of &quot;1.0&quot;, with the Fluid Density variable name set to &quot;none&quot;.  This indicates that no variable name is used; rather the constant density is used in the calculations instead.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.  This parameter is figured only when the drag and gravity force terms of the massed-particle momentum balance equation are used.

Args:
    p0:
        &#x27;density&#x27; the fluid density constant value of the corresponding fluid field
    p1:
        &#x27;density&#x27; the fluid density constant value of the corresponding fluid field
    p2:
        &#x27;density&#x27; the fluid density variable name of the corresponding fluid field - defaults to &quot;none&quot; when constant value used

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Specify density scalar field variable name of the fluid.
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_fluid_density(&quot;density&quot;)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_fluid_viscosity">
<description>
Specify the dynamic viscosity of the corresponding fluid field where the massed-particles are traced.

| The default setting for this parameter is the constant value of &quot;1.9620e+05&quot;, with the Fluid Dynamic Viscosity variable name set to &quot;none&quot;.  This indicates that no variable name is used; rather the constant dynamic viscosity is used in the calculations instead.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.  This parameter is figured only when the drag force term of the massed-particle momentum balance equation is used.

Args:
    p0:
        &#x27;viscosity&#x27; the dynamic viscosity constant value of the corresponding fluid field
    p1:
        &#x27;viscosity&#x27; the dynamic viscosity constant value of the corresponding fluid field
    p2:
        &#x27;viscosity&#x27; the dynamic viscosity variable name of the corresponding fluid field - defaults to &quot;none&quot; when constant value used

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Specify dynamic viscosity scalar field variable name of the fluid.
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_fluid_viscosity(&quot;dynamic_viscosity&quot;)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_gravity">
<description>
Specify whether the gravity force term is used in the massed-particle calculation.

| The default setting is ON.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.  If this command is ON, then the gravity force term in the massed-particle momentum balance equation is computed according to the &quot;ptrace: massed_gravity_vector&quot; setting.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Toggle on massed-particle gravity force term
        # Specify gravity vector
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_gravity(&quot;ON&quot;)
        ensight.ptrace.massed_gravity_vector(&quot;0.00000e+00-9.81000e+00&quot;,0.00000e+00)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_gravity_vector">
<description>
Specify the name of the gravity vector used in the pressure force term of the massed-particle calculation.

| The default setting is &lt;0., -9.81, 0.&gt;.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.

Args:
    p0:
        &#x27;gx&#x27; the x-component of the gravity vector
    p1:
        &#x27;gy&#x27; the y-component of the gravity vector
    p2:
        &#x27;gz&#x27; the z-component of the gravity vector

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Toggle on massed-particle gravity force term
        # Specify the gravity vector
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_gravity(&quot;ON&quot;)
        ensight.ptrace.massed_gravity_vector(&quot;0.00000e+00-9.81000e+00&quot;,0.00000e+00)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_initial_use_fluid">
<description>
Specify whether to use the velocity of the fluid at the particle emitter location as the initial velocity of the massed-particle.

| The default value is ON.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.  This parameter is figured in all terms of the massed-particle momentum balance equation.  If the value of this command is OFF, then the massed-particle emitter will use the velocity specified via the &quot;ptrace: massed_initial_velocity&quot; command.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Do not use the field velocity as the initial particle velocity
        # Specify the initial velocity value for all the massed-particles
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_initial_use_fluid(&quot;OFF&quot;)
        ensight.ptrace.massed_initial_velocity(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_initial_velocity">
<description>
Specify the initial emitter velocity vector to be used on all the massed-particles.

| The default vector value is &lt;1,1,1&gt;.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.  This parameter is figured in all terms of the massed-particle momentum balance equation.  The values of this command take effect only if &quot;ptrace: massed_initial_use_fluid&quot; is toggled OFF.

Args:
    p0:
        &#x27;vx&#x27; the x-component of the initial velocity vector
    p1:
        &#x27;vy&#x27; the y-component of the initial velocity vector
    p2:
        &#x27;vz&#x27; the z-component of the initial velocity vector

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Do not use the field velocity as the initial particle velocity
        # Specify the initial velocity value for all the massed-particles
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_initial_use_fluid(&quot;OFF&quot;)
        ensight.ptrace.massed_initial_velocity(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_particles">
<description>
Enable or disable massed-particle trace calculation.

| The default value is OFF.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify the other massed-particle commands.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_particle_density">
<description>
Specify the density of all the massed-particles.

| The default value is 1.0e+03.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.  This parameter is figured in all terms of the massed-particle momentum balance equation.  Water particle densities are on the order of 1.0e+3, and air partilce densities are on the order of 1.0.

Args:
    p0:
        &#x27;density&#x27; the density value of all the particles

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Specify density of all the massed particles
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particle_density(1.0000e+03)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_particle_diameter">
<description>
Specify the diameter of all the massed-particles.

| The default value is 1.0e-03.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.  This parameter is figured in all terms of the massed-particle momentum balance equation.  Water particle diameters are on the order of 1.0e-3, and air partilce diameters are on the order of 1.0e-6.

Args:
    p0:
        &#x27;diameter&#x27; the diameter value of all the particles

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Specify diameter of the massed particle
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particle_diameter(1.0000e-03)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_pressure">
<description>
Specify whether the pressure force term is used in the massed-particle calculation.

| The default setting is OFF.  The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.  If this command is ON, then the pressure force term in the massed-particle momentum balance equation is computed according to the &quot;ptrace: massed_pressure_gradient&quot; setting.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Toggle on massed-particle pressure force term
        # Specify pressure gradient variable
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_pressure(&quot;ON&quot;)
        ensight.ptrace.massed_pressure_gradient(&quot;grad_pressure&quot;)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_pressure_gradient">
<description>
Specify the name of the pressure gradient variable used in the pressure force term of the massed-particle calculation.

| The &quot;ptrace: massed_particles&quot; command does not have to be ON in order to specify this command.  If &quot;none&quot; is specified, then the pressure force term is ignored in the massed-particle calculation.  The default setting is &quot;none&quot;.

Examples:
    ::

        #
        # Create a massless point trace
        #
        ensight.part.select_all()
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;velocity&quot;)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()
        ensight.part.select_begin(2)
        #
        # Toggle on massed-particle pressure force term
        # Specify pressure gradient variable
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_pressure(&quot;ON&quot;)
        ensight.ptrace.massed_pressure_gradient(&quot;grad_pressure&quot;)
        ensight.part.modify_end()
        #
        # Change part to massed trace using current settings
        #
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_rebound">
<description>
Turn on/off the use of massed particle rebound coefficients.

| Only used if the &quot;ptrace: mass_particles&quot; setting is ON

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        ensight.ptrace.select_default()
        ensight.ptrace.default_emit_pt()
        ensight.view_transf.cursor(7.1,6,0.)
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.ptrace.massed_rebound(&quot;ON&quot;)
        ensight.ptrace.massed_rebound_wallhits(4)
        ensight.ptrace.massed_coef_restitution(0.8)
        ensight.ptrace.massed_coef_friction(1.000000e-01)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_rebound_fraction">
<description>
If using massed particle restitution this sets a termination criteria.  Only if the rebound velocity as a fraction of the initial impact velocity if greater than this value will the particle continue to be tracked.

| There are other terminating particle trace criteria such as the time limit controlled by &quot;ptrace: total_time&quot; and the fraction of initial impact velocity controlled by &quot;ptrace: mass_rebound_fraction&quot;

Args:
    p0:
        &#x27;fraction&#x27; the fraction of initial impact velocity

Examples:
    ::

        ensight.part.select_begin(2)
        ensight.part.modify_begin()
        ensight.ptrace.massed_rebound_fraction(.01)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_rebound_wallhits">
<description>
If using massed particle restitution this sets a termination criteria.  Only num_hits number of rebounds will be allowed at which time the particle trace will be terminated

| There are other terminating particle trace criteria such as the time limit controlled by &quot;ptrace: total_time&quot; and the fraction of initial impact velocity controlled by &quot;ptrace: mass_rebound_fraction&quot;

Args:
    p0:
        &#x27;num_hits&#x27; the number of rebounds that will be computed

Examples:
    ::

        ensight.ptrace.select_default()
        ensight.ptrace.default_emit_pt()
        ensight.view_transf.cursor(7.1,6,0.)
        ensight.part.modify_begin()
        ensight.ptrace.massed_particles(&quot;ON&quot;)
        ensight.ptrace.massed_rebound(&quot;ON&quot;)
        ensight.ptrace.massed_rebound_wallhits(4)
        ensight.ptrace.massed_coef_restitution(0.8)
        ensight.ptrace.massed_coef_friction(1.000000e-01)
        ensight.part.modify_end()
        ensight.part.select_all()
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.massed_use_ballistic">
<description>
If using massed particle restitution this sets a termination criteria.  Only num_hits number of rebounds will be allowed at which time the particle trace will be terminated

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        ensight.part.select_begin(2)
        ensight.part.modify_begin()
        ensight.ptrace.massed_buoyancy(&quot;OFF&quot;)
        ensight.ptrace.massed_use_ballistic(&quot;ON&quot;)
        ensight.ptrace.massed_ballistic_coef(0.01)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.max_angle">
<description>
Sets the maximum angle between successive particle trace line segments that will trigger a halving of the integration step.

| When a particle trace starts curving, the integration step typically needs to be decreased. This attribute is one of the controls for such adaptation.

Args:
    p0:
        &#x27;value&#x27; desired maximum angle (in degrees).  If the angle between successive segments is greater than this, the integration step will be halved. The range is 1.0 to 90.0 degrees

Examples:
    ::

        #
        # Selecting the trace(s)
        #
        ensight.part.select_begin(7,8)
        #
        # Modifying attributes for the two selected trace parts
        # (max_angle is modified in here)
        #
        ensight.part.modify_begin()
        ensight.ptrace.min_steps(3)
        ensight.ptrace.min_angle(3.0000e+00)
        ensight.ptrace.max_angle(2.0000e+01)
        ensight.ptrace.rot_angle(3.2000e+01)
        #
        # Updates the traces with the modified attributes
        #
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.min_angle">
<description>
Sets the minimum angle between successive particle trace line segments that will trigger a doubling of the integration step.

| When a particle trace is not curving, the integration step can typically be increased. This attribute is one of the controls for such adaptation.

Args:
    p0:
        &#x27;value&#x27; desired minimum angle (in degrees).  If the angle between successive segments is less than this, the integration step will be doubled. The range is 1.0 to 90.0 degrees

Examples:
    ::

        #
        # Selecting the trace(s)
        #
        ensight.part.select_begin(7,8)
        #
        # Modifying attributes for the two selected trace parts
        # (min_angle is modified in here)
        #
        ensight.part.modify_begin()
        ensight.ptrace.min_steps(3)
        ensight.ptrace.min_angle(3.0000e+00)
        ensight.ptrace.max_angle(2.0000e+01)
        ensight.ptrace.rot_angle(3.2000e+01)
        #
        # Updates the traces with the modified attributes
        #
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.min_steps">
<description>
Sets the minimum number of integration steps to perform in each element

| A higher number increases the accuracy of the integration, but is more compute intensive and produces more segments to display.

Args:
    p0:
        &#x27;num&#x27; desired minimum number of integration steps per element (range is 2 to 20)

Examples:
    ::

        #
        # Selecting the trace(s)
        #
        ensight.part.select_begin(7,8)
        #
        # Modifying attributes for the two selected trace parts
        # (min_steps being modified in here)
        #
        ensight.part.modify_begin()
        ensight.ptrace.min_steps(3)
        ensight.ptrace.min_angle(3.0000e+00)
        ensight.ptrace.max_angle(2.0000e+01)
        ensight.ptrace.rot_angle(3.2000e+01)
        #
        # Updates the traces with the modified attributes
        #
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.modify_bypartemit_byname">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.modify_bypartemit_num">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.modify_emit_totoolloc">
<description>
Change the location of the emitter in a particle trace part.

Args:
    p0:
        &#x27;part_num&#x27; particle trace part number
    p1:
        &#x27;emitter&#x27; emitter number (0-based)

Examples:
    ::

        #
        # Change the location of the tool used for the emitter
        #
        ensight.view_transf.cursor(7.422632,-0.327560,0.000000)
        #
        # modify the trace emitter based on this tool
        # (in this case, it is emitter 0 in part 2
        #
        ensight.ptrace.modify_emit_totoolloc(2,0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.modify_fileemit_name">
<description>
Change the emitter file name for a file emitter.

Args:
    p0:
        &#x27;emitter&#x27; Emitter number (0 based)
    p1:
        &#x27;filename&#x27; The new emitter file name

Examples:
    ::

        #
        # Select an existing particle trace part 3
        #
        #
        ensight.part.select_begin(3)
        #
        # Change the emitter name for emitter 0
        #
        ensight.ptrace.modify_fileemit_name(&quot;0 /tmp/new_emitter.file&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.modify_netemit_points">
<description>
Change the number of emission points for a particular net emitter in a particle trace part.

Args:
    p0:
        &#x27;emitter&#x27; emitter number (0-based)
    p1:
        &#x27;new_num_in_x&#x27; desired new number of emission points for the grid x direction.
    p2:
        &#x27;new_num_in_y&#x27; desired new number of emission points for the grid y direction

Examples:
    ::

        #
        # Selecting an existing particle trace part
        # (which contains some net emitters)
        #
        ensight.part.select_begin(3)
        #
        # Changing the number of points in the
        # first 2 net emitters (emitters 0 and 1)
        # to 5 x 6, and 9 x 15 respectively
        #
        ensight.ptrace.modify_netemit_points(0,5,6)
        ensight.ptrace.modify_netemit_points(1,9,15)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.modify_rakeemit_points">
<description>
Change the number of emission points for a particular rake emitter in a particle trace part.

Args:
    p0:
        &#x27;emitter&#x27; emitter number (0-based
    p1:
        &#x27;new_num_pts&#x27; desired new number of emission points along the rake

Examples:
    ::

        #
        # Selecting an existing particle trace part
        # (which contains a rake emitter)
        #
        ensight.part.select_begin(3)
        #
        # Changing the number of points in the
        # first emitter (emitter 0), to 8
        #
        ensight.ptrace.modify_rakeemit_points(0,8)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.node_id">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.representation">
<description>
Sets the display representation for a particle trace.

| Use the ribbon or square_tubes representations whenever rotational effects need to be seen. Surface restricted traces can only be displayed in line representation.

Args:
    p0:
        &#x27;rep&#x27;

        * line
        * ribbon
        * square_tubes

Examples:
    ::

        #
        # Selecting the trace(s)
        #
        ensight.part.select_begin(7,8)
        #
        # Modifying attributes for the two selected trace parts
        # (representation is modified in here)
        #
        ensight.part.modify_begin()
        ensight.ptrace.representation(&quot;ribbon&quot;)
        ensight.ptrace.ribbon_width(2.0000e+00)
        #
        # Updates the traces with the modified attributes
        #
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.ribbon_width">
<description>
Sets the width for ribbon or square tube particle trace representations.

| This attribute has no effect when using the &quot;line&quot; trace representation.

Args:
    p0:
        &#x27;width&#x27; the width of the ribbon or square tube

Examples:
    ::

        #
        # Selecting the trace(s)
        #
        ensight.part.select_begin(7,8)
        #
        # Modifying attributes for the two selected trace parts
        # (ribbon_width is modified in here)
        #
        ensight.part.modify_begin()
        ensight.ptrace.representation(&quot;square_tubes&quot;)
        ensight.ptrace.ribbon_width(2.0000e+00)
        #
        # Updates the traces with the modified attributes
        #
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.rot_angle">
<description>
Sets the angle between successive particle trace line segments that will trigger a halving of the integration step.

| When a particle begins experiencing rotational effects, the integration step typically needs to be decreased. This attribute is one of the controls for such adaptation.

Args:
    p0:
        &#x27;value&#x27; desired rotational angle (in degrees). If the change in rotation angle is greater than this, the integration step will be halved.  range is 1.0 to 90.0 degrees

Examples:
    ::

        #
        # Selecting the trace(s)
        #
        ensight.part.select_begin(7,8)
        #
        # Modifying attributes for the two selected trace parts
        # (rot_angle is modified in here)
        #
        ensight.part.modify_begin()
        ensight.ptrace.min_steps(3)
        ensight.ptrace.min_angle(3.0000e+00)
        ensight.ptrace.max_angle(2.0000e+01)
        ensight.ptrace.rot_angle(3.2000e+01)
        #
        # Updates the traces with the modified attributes
        #
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.select_default">
<description>
Sets the currently selected particle trace parts to none, so any following attribute modifications will change the particle trace defaults.

| When particle trace parts are created, the defaults, and any &quot;ptrace:&quot; attribute commands between &quot;ptrace: begin&quot; and &quot;ptrace: end&quot;, are used in the creation.

Examples:
    ::

        #
        # Setting to default particle traces
        #
        ensight.ptrace.select_default()
        #
        # modifying some attributes
        #
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;pathline&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.select_emitter_begin">
<description>
Select emitters within a particle trace part for the purpose of modifying emitter attributes, deleting, etc.

Args:
    p0:
        &#x27;emitterN&#x27; emitter numbers (0-based)

Examples:
    ::

        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(2)
        #
        # Selecting the first 3 emitters within the part
        # for the purpose of deleting them
        #
        ensight.ptrace.select_emitter_begin(0,1,2)
        ensight.ptrace.delete_emitter()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.select_emitter_end">
<description>
Select emitters within a particle trace part for the purpose of modifying emitter attributes, deleting, etc.

Args:
    p0:
        &#x27;emitterN&#x27; emitter numbers (0-based)

Examples:
    ::

        #
        # Selecting the parent part(s)
        #
        ensight.part.select_begin(2)
        #
        # Selecting the first 3 emitters within the part
        # for the purpose of deleting them
        #
        ensight.ptrace.select_emitter_begin(0,1,2)
        ensight.ptrace.delete_emitter()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.start_time">
<description>
Specifies the solution time at which to begin particle emission.

Args:
    p0:
        &#x27;emit_time&#x27; solution time for particle emission. Must be in the range of valid solution times

Examples:
    ::

        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (the start_time is being set here)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.start_time(1.5000e+01)
        ensight.ptrace.delta_time(1.0000e+00)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.surface_restricted">
<description>
Toggles trace creation to be surface restricted or not.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (the surface_restricted flag is being set here)
        #
        ensight.ptrace.begin()
        ensight.part.description(&quot;Particle trace part&quot;)
        ensight.ptrace.surface_restricted(&quot;ON&quot;)
        ensight.ptrace.variable_offset(1.0000e-01)
        ensight.ptrace.display_offset(0.5000e+00)
        ensight.ptrace.total_time(2.0000e+02)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.time_step_begin">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.time_step_end">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.total_time">
<description>
Sets the maximum length of time that the particle trace is allowed to continue.

| A particle trace may terminate earlier than this for other reasons, but this limit avoids infinite calculations in recirculation zones.

Args:
    p0:
        &#x27;limit&#x27; total time limit

Examples:
    ::

        #
        # Selecting the trace(s)
        #
        ensight.part.select_begin(7,8)
        #
        # Modifying attributes for the two selected trace parts
        # (total_time is modified in here)
        #
        ensight.part.modify_begin()
        ensight.ptrace.total_time(2.0000e+02)
        ensight.ptrace.trace_direction(&quot;+/-&quot;)
        #
        # Updates the traces with the modified attributes
        #
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.trace_direction">
<description>
Sets the integration direction for a particle trace - forward in time, backward in time, or both.

| By setting this option appropriately, one can see where a particle will go if released from the emitter location (the + direction), or one can see the path that a particle took to get to the emitter location (the - direction).

Args:
    p0:
        &#x27;direction&#x27;

        * +
        * -
        * +/-

Examples:
    ::

        #
        # Selecting the trace(s)
        #
        ensight.part.select_begin(7,8)
        #
        # Modifying attributes for the two selected trace parts
        # (trace_direction is modified in here)
        #
        ensight.part.modify_begin()
        ensight.ptrace.total_time(2.0000e+02)
        ensight.ptrace.trace_direction(&quot;+/-&quot;)
        #
        # Updates the traces with the modified attributes
        #
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.type">
<description>
Sets the type of particle trace that will be created.

| Pathline is only available for transient data cases.

Args:
    p0:
        &#x27;option&#x27;

        * streamline
        * pathline
        * nodetrack
        * variablemintrack
        * variablemaxtrack

Examples:
    ::

        #
        # Setting default particle trace variable
        #
        ensight.ptrace.select_default()
        ensight.part.modify_begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.part.modify_end()
        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (the type is being set here)
        #
        ensight.ptrace.begin()
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.variable">
<description>
Specifies the vector variable to use for the flow field for the particle trace.

Args:
    p0:
        &#x27;name&#x27; name of the vector variable

Examples:
    ::

        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (the variable is being set here)
        #
        ensight.ptrace.begin()
        ensight.ptrace.variable(&quot;VITESSE&quot;)
        ensight.ptrace.type(&quot;streamline&quot;)
        ensight.ptrace.component(1.0000e+00,1.0000e+00,1.0000e+00)
        ensight.ptrace.representation(&quot;line&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.ptrace.variable_offset">
<description>
Sets the distance from the surface into the flow field at which the velocity variable will be sampled.  The tangential component of the variable at this offset distance is the field that will be used to trace through for surface restricted traces.

| A positive number moves the distance in the direction of the positive normal of the surface, while a negative number moves in the opposite direction.  If there is only flow on one side of the surface, the program will flip the sign internally.
| Used only for surface restricted particle traces.

Args:
    p0:
        &#x27;offset_distance&#x27; distance into the field

Examples:
    ::

        #
        # Selecting the parent part
        #
        ensight.part.select_begin(1)
        #
        # Setting some attributes before creation
        # (the variable_offset for the surface_restricted trace
        #  is being set here)
        #
        ensight.ptrace.begin()
        ensight.part.description(&quot;Particle trace part&quot;)
        ensight.ptrace.surface_restricted(&quot;ON&quot;)
        ensight.ptrace.variable_offset(1.0000e-01)
        ensight.ptrace.display_offset(0.5000e+00)
        ensight.ptrace.total_time(2.0000e+02)
        ensight.ptrace.emit_at_current_time(&quot;ON&quot;)
        ensight.ptrace.end()
        #
        # Creating trace from a point
        #
        ensight.ptrace.create_pt()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.number_of_sample_pts">
<description>
Specify the number of evenly spaced points to sample either along the line tool or over the specified range of time steps.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| If you specify more or fewer sample points than the number of time steps, EnSight linearly interpolates between the adjoining time steps.
| If the query is an FFT sampling, the number of frequencies output will be (a power of two) less than or equal to the number of sample points.

Args:
    p0:
        &#x27;total_points&#x27; For queries over Distance using the Line Tool, this specifies the number of equally spaced points to query along the line (default = 20).  For queries Over Time, this specifies how many evenly timed moments over the specified range of time steps at which to query. If equal to the number of timesteps then you get a sample at each timestep.

Examples:
    ::

        #
        # Creation example...
        #
        ensight.part.select_begin(1)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.line_loc(1,2.7770e-01,7.7363e-02,1.1348e-02)
        ensight.query_ent_var.line_loc(2,7.6144e-01,1.7007e-01,5.5697e-02)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;Density&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(0)
        #
        # Modification example...
        #
        ensight.query_ent_var.modify_begin()
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.auto_plot_checkexisting">
<description>
Specifies to check for existing plotters with the same abscissa when auto plotting query information.

| Only applicable with the &quot;query_ent_var: auto_plot_queries ON&quot; command.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        ensight.query_ent_var.auto_plot_checkexisting(&quot;ON&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.auto_plot_queries">
<description>
Specify that any created query to be plotted automatically.

| See also the &quot;query_ent_var: auto_plot_checkexisting&quot; command.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        ensight.query_ent_var.auto_plot_queries(&quot;ON&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.begin">
<description>
Delimit the modifications for query attributes.

| These commands are used to set the attributes for a query creation.

Examples:
    ::

        ensight.part.select_begin(1)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.line_loc(1,2.7770e-01,7.7363e-02,1.1348e-02)
        ensight.query_ent_var.line_loc(2,7.6144e-01,1.7007e-01,5.5697e-02)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;Density&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.end">
<description>
Delimit the modifications for query attributes.

| These commands are used to set the attributes for a query creation.

Examples:
    ::

        ensight.part.select_begin(1)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.line_loc(1,2.7770e-01,7.7363e-02,1.1348e-02)
        ensight.query_ent_var.line_loc(2,7.6144e-01,1.7007e-01,5.5697e-02)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;Density&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.begin_simtime">
<description>
Specify the beginning simuation time to start the query over time.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Only applicable with the &quot;query_ent_var: type time&quot; command.

Args:
    p0:
        &#x27;time_value&#x27; beginning simulation time value (that corresponds to a valid time step) in which to start the query over time

Examples:
    ::

        #
        # Select part
        #
        ensight.part.select_begin(2)
        #
        # Query over time
        #
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;time&quot;)
        ensight.query_ent_var.number_of_sample_pts(84)
        ensight.query_ent_var.begin_simtime(2.2300e+02)
        ensight.query_ent_var.end_simtime(4.8800e+02)
        ensight.query_ent_var.constrain(&quot;node&quot;)
        ensight.query_ent_var.sample_by(&quot;value&quot;)
        ensight.query_ent_var.node_id(1)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;temp&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        #
        # Select resulting plot curve
        #
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.constrain">
<description>
Specify the manner in which to constrain the query of the variable.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;option&#x27;

        * query type Over Time choices are:
        * cursor
        * element
        * ijk
        * max
        * min
        * node
        * scalar
        * query type Distance choices are:
        * 1d_part
        * line_tool
        * spline

Examples:
    ::

        #
        # Modification change:
        #
        ensight.query_ent_var.modify_begin()
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.cursor_loc">
<description>
Specify the x,y,z coordinates of the cursor location to be queried.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Used in conjunction with the &quot;query_ent_var: type time&quot; and the &quot;query_ent_var: constrain cursor&quot; commands.

Args:
    p0:
        &#x27;x_coord&#x27; specify the x, y, z coordinate locations of the cursor in model space
    p1:
        &#x27;y_coord&#x27; specify the x, y, z coordinate locations of the cursor in model space
    p2:
        &#x27;z_coord&#x27; specify the x, y, z coordinate locations of the cursor in model space

Examples:
    ::

        #
        # Specify part on which to perform query
        #
        ensight.part.select_begin(2)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;time&quot;)
        ensight.query_ent_var.number_of_sample_pts(84)
        ensight.query_ent_var.begin_simtime()
        ensight.query_ent_var.end_simtime()
        ensight.query_ent_var.constrain(&quot;cursor&quot;)
        ensight.query_ent_var.sample_by(&quot;value&quot;)
        ensight.query_ent_var.cursor_loc(1.4870e+00,4.3663e-01,1.1934e+01)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;temp&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        #
        # Specify new curve to be current
        #

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.description">
<description>
Specify the text description for the query entity.

| This command must lie between a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair.

Args:
    p0:
        &#x27;desc&#x27; text description for the query entity

Examples:
    ::

        ensight.curve.select_begin(1,&quot;curve:&quot;,&quot;select_begin&quot;,&quot;part:&quot;,&quot;select_begin&quot;,2)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;Temp Vs. Time&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;time&quot;)
        ensight.query_ent_var.number_of_sample_pts(10)
        ensight.query_ent_var.begin_simtime(2.2300e+02)
        ensight.query_ent_var.end_simtime(4.8800e+02)
        ensight.query_ent_var.constrain(&quot;cursor&quot;)
        ensight.query_ent_var.sample_by(&quot;value&quot;)
        ensight.query_ent_var.cursor_loc(1.4870e+00,4.3663e-01,1.1934e+01)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;temp&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(2)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.distance">
<description>
Specify how to parameterize the distance of the computed query (also, how the Distance is labeled on the plot).

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Only applicable with the &quot;query_ent_var: type distance&quot; command.

Args:
    p0:
        &#x27;option&#x27;

        * arc_length
        * x_arc_length
        * y_arc_length
        * z_arc_length
        * from_origin
        * x_from_origin
        * y_from_origin
        * z_from_origin

Examples:
    ::

        #
        # Modify to parameterize using only the x-component of the arc length
        #
        ensight.query_ent_var.modify_begin()
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.distance(&quot;x_arc_length&quot;)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.elem_id">
<description>
Specify the element id used to perform the specified element constrained query.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Only applicable with the &quot;query_ent_var: type time&quot; and &quot;query_ent_var: constrain element&quot; commands.
| Only applicable on element-based variables.
| Only applicable with the &quot;query_ent_var: constrain element&quot; and &quot;query_ent_var: type time&quot; commands.

Args:
    p0:
        &#x27;element_id_#&#x27; valid element id number (0-bias

Examples:
    ::

        ensight.part.select_begin(4)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;time&quot;)
        ensight.query_ent_var.number_of_sample_pts(10)
        ensight.query_ent_var.begin_simtime(2.2300e+02)
        ensight.query_ent_var.end_simtime(4.8800e+02)
        ensight.query_ent_var.constrain(&quot;element&quot;)
        ensight.query_ent_var.sample_by(&quot;value&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;NodeToElem&quot;)
        ensight.query_ent_var.elem_id(14)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.end_simtime">
<description>
Specify the ending simulation time used to stop the query over time.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Only applicable with the &quot;query_ent_var: type time&quot; command.

Args:
    p0:
        &#x27;time_value&#x27; ending simulation time value (that corresponds to a time step) at which to stop the computed query over time

Examples:
    ::

        #
        # Select part
        #
        ensight.part.select_begin(2)
        #
        # Query over time
        #
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;time&quot;)
        ensight.query_ent_var.number_of_sample_pts(84)
        ensight.query_ent_var.begin_simtime(2.2300e+02)
        ensight.query_ent_var.end_simtime(4.8800e+02)
        ensight.query_ent_var.constrain(&quot;node&quot;)
        ensight.query_ent_var.sample_by(&quot;value&quot;)
        ensight.query_ent_var.node_id(1)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;temp&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        #
        # Select resulting plot curve
        #
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.generate_over">
<description>
Specify whether the query is over time or distance.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;type&#x27;

        * distance
        * time

Examples:
    ::

        ensight.part.select_all()
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        ensight.query_ent_var.query_type(&quot;generated&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.begin_simtime(0.0000e+00)
        ensight.query_ent_var.end_simtime(0.1900e+02)
        ensight.query_ent_var.constrain(&quot;node&quot;)
        ensight.query_ent_var.sample_by(&quot;value&quot;)
        ensight.query_ent_var.node_id(139)
        ensight.query_ent_var.variable_1(&quot;temperature&quot;)
        ensight.query_ent_var.generate_over(&quot;time&quot;)
        ensight.query_ent_var.variable_2(&quot;TIME&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.ijk">
<description>
Specify the ijk location used to perform the specified ijk constrained query.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Only applicable with the &quot;query_ent_var: constrain ijk&quot; and &quot;query_ent_var: type time&quot; commands.

Args:
    p0:
        &#x27;i-plane_#&#x27; i, j, and k component values which must lie within the min/max of the i, j, and k range
    p1:
        &#x27;j-plane_#&#x27; i, j, and k component values which must lie within the min/max of the i, j, and k range
    p2:
        &#x27;k-plane_#&#x27; i, j, and k component values which must lie within the min/max of the i, j, and k range

Examples:
    ::

        ensight.part.select_begin(4)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;time&quot;)
        ensight.query_ent_var.number_of_sample_pts(10)
        ensight.query_ent_var.begin_simtime(2.2300e+02)
        ensight.query_ent_var.end_simtime(4.8800e+02)
        ensight.query_ent_var.constrain(&quot;ijk&quot;)
        ensight.query_ent_var.sample_by(&quot;value&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;temp&quot;)
        ensight.query_ent_var.ijk(2,4,14)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.line_loc">
<description>
Specify the location of the line used for distance queries when the constraint is set to line_tool.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;end_point_id&#x27; endpoints of the line, either 1 or 2
    p1:
        &#x27;x_comp&#x27; x , y, or z component of the corresponding line endpoint in model coordinates
    p2:
        &#x27;y_comp&#x27; x , y, or z component of the corresponding line endpoint in model coordinates
    p3:
        &#x27;z_comp&#x27; x , y, or z component of the corresponding line endpoint in model coordinates

Examples:
    ::

        ensight.part.select_begin(1)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.line_loc(1,2.7770e-01,7.7363e-02,1.1348e-02)
        ensight.query_ent_var.line_loc(2,7.6144e-01,1.7007e-01,5.5697e-02)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;Density&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.marker_rgb">
<description>
Specify the color for the visible markers indicating query location.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Used only if query_ent_var: marker_visible is on.

Args:
    p0:
        &#x27;red_val&#x27; red, green, or blue component of color (0. to 1.)
    p1:
        &#x27;grn_val&#x27; red, green, or blue component of color (0. to 1.)
    p2:
        &#x27;blu_val&#x27; red, green, or blue component of color (0. to 1.)

Examples:
    ::

        ensight.query_ent_var.modify_begin()
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.constrain(&quot;1d_part&quot;)
        ensight.query_ent_var.marker_rgb(1.0000e+00,0.0000e+00,1.0000e+00)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.marker_size_normalized">
<description>
Specify the size of a query marker.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Used only if query_ent_var:marker_visible is on.
| A size of 1.0 indicates to use the computed size.
| Values &gt;1 scale the computed size larger while values &lt;1 (but &gt;0) shrink the marker.

Args:
    p0:
        &#x27;size_value&#x27; size of the marker

Examples:
    ::

        ensight.query_ent_var.modify_begin()
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.constrain(&quot;1d_part&quot;)
        ensight.query_ent_var.marker_size_normalized(2.0000e+00)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.marker_visible">
<description>
The begin/end construct in which to modify query entity attributes.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| If the query type is distance, then the marker is placed at the location of the origin (starting endpoint).

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    ::

        ensight.query_ent_var.modify_begin()
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;time&quot;)
        ensight.query_ent_var.constrain(&quot;element&quot;)
        ensight.query_ent_var.marker_visible(&quot;OFF&quot;)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.modify_begin">
<description>
Delimit the modifications for query entity attributes.

| These commands are used to set the attributes for a query entity.

Examples:
    ::

        #
        # Modification change:
        #
        ensight.query_ent_var.modify_begin()
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.modify_end">
<description>
Delimit the modifications for query entity attributes.

| These commands are used to set the attributes for a query entity.

Examples:
    ::

        #
        # Modification change:
        #
        ensight.query_ent_var.modify_begin()
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.multiple_segments_by">
<description>
Treat multiple line segments of a distance query as multiple queries, (i.e., reset the distance to 0. for each segment) or as a continuous line.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Only applicable with the &quot;query_ent_var: type distance&quot; command.

Args:
    p0:
        &#x27;option&#x27;

        * accumulation
        * reset_each

Examples:
    ::

        ensight.query_ent_var.modify_begin()
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.constrain(&quot;1d_part&quot;)
        ensight.query_ent_var.multiple_segments_by(&quot;reset_each&quot;)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.node_id">
<description>
Specify the node id in which to perform the specified node constrained query.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Only applicable with the &quot;query_ent_var: constrain node&quot; command. Only applicable on node-based variables.

Args:
    p0:
        &#x27;node_id_#&#x27; node id, or label, number

Examples:
    ::

        #
        # Select part
        #
        ensight.part.select_begin(2)
        #
        # Query over time
        #
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;time&quot;)
        ensight.query_ent_var.number_of_sample_pts(84)
        ensight.query_ent_var.begin_simtime(2.2300e+02)
        ensight.query_ent_var.end_simtime(4.8800e+02)
        ensight.query_ent_var.constrain(&quot;node&quot;)
        ensight.query_ent_var.sample_by(&quot;value&quot;)
        ensight.query_ent_var.node_id(1)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;temp&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.operation">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.operation_factor1">
<description>
Specify the scale factor to apply to the one or two existing queries of an operation query.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;scale&#x27; value to scale the respective query by

Examples:
    ::

        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        ensight.query_ent_var.query_type(&quot;operation&quot;)
        ensight.query_ent_var.operation_factor1(2.0000e+00)
        ensight.query_ent_var.operation_factor2(-1.5000e+01)
        ensight.query_ent_var.operation_query1byname(&quot;Distance&quot;,&quot;vs.&quot;,&quot;temp&quot;,&quot;for&quot;,&quot;line&quot;,&quot;tool&quot;)
        ensight.query_ent_var.operation_query2byname(&quot;Time&quot;,&quot;vs.&quot;,&quot;temp&quot;,&quot;for&quot;,&quot;Node&quot;,1)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.operation_factor2">
<description>
Specify the scale factor to apply to the one or two existing queries of an operation query.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;scale&#x27; value to scale the respective query by

Examples:
    ::

        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        ensight.query_ent_var.query_type(&quot;operation&quot;)
        ensight.query_ent_var.operation_factor1(2.0000e+00)
        ensight.query_ent_var.operation_factor2(-1.5000e+01)
        ensight.query_ent_var.operation_query1byname(&quot;Distance&quot;,&quot;vs.&quot;,&quot;temp&quot;,&quot;for&quot;,&quot;line&quot;,&quot;tool&quot;)
        ensight.query_ent_var.operation_query2byname(&quot;Time&quot;,&quot;vs.&quot;,&quot;temp&quot;,&quot;for&quot;,&quot;Node&quot;,1)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.operation_query1byname">
<description>
Specify the name of the one or two existing queries of an operation query.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;name&#x27; existing query name

Examples:
    ::

        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        ensight.query_ent_var.query_type(&quot;operation&quot;)
        ensight.query_ent_var.operation_factor1(2.0000e+00)
        ensight.query_ent_var.operation_factor2(-1.5000e+01)
        ensight.query_ent_var.operation_query1byname(&quot;Distance&quot;,&quot;vs.&quot;,&quot;temp&quot;,&quot;for&quot;,&quot;line&quot;,&quot;tool&quot;)
        ensight.query_ent_var.operation_query2byname(&quot;Time&quot;,&quot;vs.&quot;,&quot;temp&quot;,&quot;for&quot;,&quot;Node&quot;,1)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.operation_query2byname">
<description>
Specify the name of the one or two existing queries of an operation query.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;name&#x27; existing query name

Examples:
    ::

        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        ensight.query_ent_var.query_type(&quot;operation&quot;)
        ensight.query_ent_var.operation_factor1(2.0000e+00)
        ensight.query_ent_var.operation_factor2(-1.5000e+01)
        ensight.query_ent_var.operation_query1byname(&quot;Distance&quot;,&quot;vs.&quot;,&quot;temp&quot;,&quot;for&quot;,&quot;line&quot;,&quot;tool&quot;)
        ensight.query_ent_var.operation_query2byname(&quot;Time&quot;,&quot;vs.&quot;,&quot;temp&quot;,&quot;for&quot;,&quot;Node&quot;,1)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.origin">
<description>
Specify a location which will be used to select the origin of a distance plot when performing the query on a 1D part.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Only applicable with the &quot;querey_ent_var: type distance&quot; and &quot;query_ent_var: constrain 1d_part&quot; commands.
| The end point closest to the origin specified will be used as the &quot;origin&quot; of the query, i.e., where distance = 0.
| If the ID part is a closed loop (i.e., there are no end points), the closest point on the loop is used as the &quot;origin&quot;.

Args:
    p0:
        &#x27;x_coord&#x27; x, y, or z coordinate value in model coordinates
    p1:
        &#x27;y_coord&#x27; x, y, or z coordinate value in model coordinates
    p2:
        &#x27;z_coord&#x27; x, y, or z coordinate value in model coordinates

Examples:
    ::

        ensight.query_ent_var.modify_begin()
        ensight.query_ent_var.origin(2.3596e+00,1.8494e+00,1.1773e+01)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.part_id">
<description>
Specify the 1D part number to query when performing a query over distance with a part constraint.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;part_id_#&#x27; GUI number of the part

Examples:
    ::

        ensight.part.select_begin(4)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.part_id(4)
        ensight.query_ent_var.constrain(&quot;1d_part&quot;)
        ensight.query_ent_var.distance(&quot;arc_length&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;temp&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.part_idbyname">
<description>
Specify the 1D part name to query when performing a query over distance with a part constraint.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;part_name&#x27; GUI name of the part

Examples:
    ::

        ensight.part.select_begin(&quot;Flow&quot;,&quot;Field&quot;)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.part_idbyname(&quot;Line&quot;,&quot;Clip&quot;)
        ensight.query_ent_var.constrain(&quot;1d_part&quot;)
        ensight.query_ent_var.distance(&quot;arc_length&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;temp&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.query">
<description>
Specify the creation of a query entity.

| The query is created using the current query attributes.

Examples:
    ::

        ensight.part.select_begin(1)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;distance&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.line_loc(1,2.7770e-01,7.7363e-02,1.1348e-02)
        ensight.query_ent_var.line_loc(2,7.6144e-01,1.7007e-01,5.5697e-02)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;Density&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.query_type">
<description>
Specify the type of query to be created.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;type&#x27;

        * generated
        * operation
        * external

Examples:
    ::

        ensight.part.select_all()
        #
        # At line tool over distance query
        #
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        ensight.query_ent_var.query_type(&quot;generated&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.line_loc(1,-7.5000e-01,1.1561e+00,1.0000e+00)
        ensight.query_ent_var.line_loc(2,1.7500e+00,1.1561e+00,1.0000e+00)
        ensight.query_ent_var.variable_1(&quot;temperature&quot;)
        ensight.query_ent_var.generate_over(&quot;distance&quot;)
        ensight.query_ent_var.variable_2(&quot;DISTANCE&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.sample_by">
<description>
Specify how to report values queried over time.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.
| Only applicable with the &quot;query_ent_var: type time&quot; command.

Args:
    p0:
        &#x27;option&#x27;

        * value
        * fft

Examples:
    ::

        #
        # Select part
        #
        ensight.part.select_begin(2)
        #
        # Query over time
        #
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;time&quot;)
        ensight.query_ent_var.number_of_sample_pts(84)
        ensight.query_ent_var.begin_simtime(2.2300e+02)
        ensight.query_ent_var.end_simtime(4.8800e+02)
        ensight.query_ent_var.constrain(&quot;node&quot;)
        ensight.query_ent_var.sample_by(&quot;value&quot;)
        ensight.query_ent_var.node_id(1)
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.variable).
        ensight.query_ent_var.variable(&quot;temp&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        #
        # Select resulting plot curve
        #
        ensight.curve.select_begin(0)
        #
        # Modified to sample by FFT
        #
        ensight.query_ent_var.modify_begin()
        # WARNING: following line includes OBSOLETE call (ensight.query_ent_var.type).
        ensight.query_ent_var.type(&quot;time&quot;)
        ensight.query_ent_var.constrain(&quot;node&quot;)
        ensight.query_ent_var.sample_by(&quot;fft&quot;)
        ensight.query_ent_var.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.scalar_variable">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.scalar_value">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.select_all_timesteps">
<description>
Causes all current timesteps to be selected for querying.

| This command is not generated by EnSight, but can be placed in a command file to generalize it so you do not have to know how many time steps are present.  It can replace the following commands:
| query_ent_var: begin_simtime &lt;time_value&gt;
| query_ent_var: end_simtime &lt;time_value&gt;
| query_ent_var: number_of_sample_pts &lt;total_points&gt;

Examples:
    ::

        ensight.part.select_begin(1)
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        ensight.query_ent_var.query_type(&quot;generated&quot;)
        ensight.query_ent_var.select_all_timesteps()
        ensight.query_ent_var.constrain(&quot;node&quot;)
        ensight.query_ent_var.sample_by(&quot;value&quot;)
        ensight.query_ent_var.node_id(100)
        ensight.query_ent_var.variable_1(&quot;Stress&quot;)
        ensight.query_ent_var.generate_over(&quot;time&quot;)
        ensight.query_ent_var.variable_2(&quot;TIME&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()
        ensight.curve.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.spline_id">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.spline_name">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.variable_1">
<description>
Specify the variables to be queried. The first variable can be any active variable. The second variable can be distance, time, or a second active variable.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;name&#x27; name of the active variable. For variable_1 it can be any active variable. For variable_2, it can be DISTANCE if a non-scatter query over distance is being created, TIME if a non-scatter query over time is being created, or any active variable if a scatter query is being created.  If plotted, variable_1 will be the Y-axis variable and varibe_2 will be the X-axis variable.

Examples:
    ::

        ensight.part.select_all()
        #
        # At line tool over distance query
        #
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        ensight.query_ent_var.query_type(&quot;generated&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.line_loc(1,-7.5000e-01,1.1561e+00,1.0000e+00)
        ensight.query_ent_var.line_loc(2,1.7500e+00,1.1561e+00,1.0000e+00)
        ensight.query_ent_var.variable_1(&quot;temperature&quot;)
        ensight.query_ent_var.generate_over(&quot;distance&quot;)
        ensight.query_ent_var.variable_2(&quot;DISTANCE&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.query_ent_var.variable_2">
<description>
Specify the variables to be queried. The first variable can be any active variable. The second variable can be distance, time, or a second active variable.

| This command must lie between either a &quot;query_ent_var: begin&quot; and &quot;query_ent_var: end&quot; pair, or a &quot;query_ent_var: modify_begin&quot; and &quot;query_ent_var: modify_end&quot; pair.

Args:
    p0:
        &#x27;name&#x27; name of the active variable. For variable_1 it can be any active variable. For variable_2, it can be DISTANCE if a non-scatter query over distance is being created, TIME if a non-scatter query over time is being created, or any active variable if a scatter query is being created.  If plotted, variable_1 will be the Y-axis variable and varibe_2 will be the X-axis variable.

Examples:
    ::

        ensight.part.select_all()
        #
        # At line tool over distance query
        #
        ensight.query_ent_var.begin()
        ensight.query_ent_var.description(&quot;&quot;)
        ensight.query_ent_var.query_type(&quot;generated&quot;)
        ensight.query_ent_var.number_of_sample_pts(20)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.constrain(&quot;line_tool&quot;)
        ensight.query_ent_var.line_loc(1,-7.5000e-01,1.1561e+00,1.0000e+00)
        ensight.query_ent_var.line_loc(2,1.7500e+00,1.1561e+00,1.0000e+00)
        ensight.query_ent_var.variable_1(&quot;temperature&quot;)
        ensight.query_ent_var.generate_over(&quot;distance&quot;)
        ensight.query_ent_var.variable_2(&quot;DISTANCE&quot;)
        ensight.query_ent_var.end()
        ensight.query_ent_var.query()

Returns:
    zero on success, non-zero on error
</description>
</override>
</docstrings>
