<docstrings>
<override namespace="ensight.clip.angle">
<description>
Set the angle for a cone clip.

Args:
    p0:
        &#x27;cone_angle&#x27; the cone angle in degrees

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(1)
        ensight.clip.begin()
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.tool(&quot;cone&quot;)
        ensight.clip.origin(0,0,0)
        ensight.clip.axis(1,0,0)
        #
        # Set the cone to 20 degrees
        #
        ensight.clip.angle(20.)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.axis">
<description>
Set the direction vector for quadric and revolution clips.

| The origin together with the axis defines the location and orientation of the quadric and revolution tools.
| The origin and axis define the point and axis about which a 1D part is revolved.

Args:
    p0:
        &#x27;x_comp&#x27; x, y, z components of the direction vector
    p1:
        &#x27;y_comp&#x27; x, y, z components of the direction vector
    p2:
        &#x27;z_comp&#x27; x, y, z components of the direction vector

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(1)
        ensight.clip.begin()
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.tool(&quot;cylinder&quot;)
        ensight.clip.origin(0,0,0)
        #
        # Set the cone axis to lie along the x axis
        #
        ensight.clip.axis(1,0,0)
        ensight.clip.radius(.5)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.begin">
<description>
Delimit the modifications for clip attributes.

| These commands are used to set the attributes for a clip part creation.

Examples:
    ::

        ensight.clip.begin()
        #
        # Change attributes
        #
        ensight.clip.domain(&quot;inside&quot;)
        ensight.clip.tool(&quot;plane&quot;)
        ensight.clip.plane(1,-1,-1,0)
        ensight.clip.plane(2,1,-1,0)
        ensight.clip.plane(3,1,1,0)
        #
        # End change attributes
        #
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.end">
<description>
Delimit the modifications for clip attributes.

| These commands are used to set the attributes for a clip part creation.

Examples:
    ::

        ensight.clip.begin()
        #
        # Change attributes
        #
        ensight.clip.domain(&quot;inside&quot;)
        ensight.clip.tool(&quot;plane&quot;)
        ensight.clip.plane(1,-1,-1,0)
        ensight.clip.plane(2,1,-1,0)
        ensight.clip.plane(3,1,1,0)
        #
        # End change attributes
        #
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.box_axis">
<description>
Specify the direction vectors for a box clip.

| The direction vectors are in reference to the parent part frame.

Args:
    p0:
        &#x27;axis&#x27;

        * x
        * y
        * z
    p1:
        &#x27;x_vector&#x27; The x component of the direction vector
    p2:
        &#x27;y_vector&#x27; The y component of the direction vector
    p3:
        &#x27;z_vector&#x27; The z component of the direction vector

Examples:
    ::

        #
        # Select a parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a xyz box clip with the box aligned with the
        # global axis system and with an origin -.75, -.75, -.25
        # The box sides are of length 1., 1.5, 2.
        #
        ensight.clip.tool(&quot;xyz_box&quot;)
        ensight.clip.box_origin(-7.500000e-01,-7.500000e-01,-2.500000e-01)
        ensight.clip.box_axis(&quot;x&quot;,1.000000e+00,0.000000e+00,0.000000e+00)
        ensight.clip.box_axis(&quot;y&quot;,0.000000e+00,1.000000e+00,0.000000e+00)
        ensight.clip.box_axis(&quot;z&quot;,0.000000e+00,0.000000e+00,1.000000e+00)
        ensight.clip.box_length(1.000000e+00,1.500000e+00,2.000000e+00)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.box_length">
<description>
Specify the size of the box clip in the x, y, and z directions

| The lengths are in relation to the box axis directions.

Args:
    p0:
        &#x27;x_len&#x27; The length of box clip in the x direction
    p1:
        &#x27;y_len&#x27; The length of box clip in the y direction
    p2:
        &#x27;z_len&#x27; The length of box clip in the z direction

Examples:
    ::

        #
        # Select a parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a xyz box clip with the box aligned with the
        # global axis system and with an origin -.75, -.75, -.25
        # The box sides are of length 1., 1.5, 2.
        #
        ensight.clip.tool(&quot;xyz_box&quot;)
        ensight.clip.box_origin(-7.500000e-01,-7.500000e-01,-2.500000e-01)
        ensight.clip.box_axis(&quot;x&quot;,1.000000e+00,0.000000e+00,0.000000e+00)
        ensight.clip.box_axis(&quot;y&quot;,0.000000e+00,1.000000e+00,0.000000e+00)
        ensight.clip.box_axis(&quot;z&quot;,0.000000e+00,0.000000e+00,1.000000e+00)
        ensight.clip.box_length(1.000000e+00,1.500000e+00,2.000000e+00)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.box_origin">
<description>
Specify the origin of the box clip in reference to the parent part frame

| The origin is in reference to the parent part frame.

Args:
    p0:
        &#x27;x_ori&#x27; The x-origin of the box clip
    p1:
        &#x27;y_ori&#x27; The y-origin of the box clip
    p2:
        &#x27;z_ori&#x27; The z-origin of the box clip

Examples:
    ::

        #
        # Select a parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a xyz box clip with the box aligned with the
        # global axis system and with an origin -.75, -.75, -.25
        # The box sides are of length 1., 1.5, 2.
        #
        ensight.clip.tool(&quot;xyz_box&quot;)
        ensight.clip.box_origin(-7.500000e-01,-7.500000e-01,-2.500000e-01)
        ensight.clip.box_axis(&quot;x&quot;,1.000000e+00,0.000000e+00,0.000000e+00)
        ensight.clip.box_axis(&quot;y&quot;,0.000000e+00,1.000000e+00,0.000000e+00)
        ensight.clip.box_axis(&quot;z&quot;,0.000000e+00,0.000000e+00,1.000000e+00)
        ensight.clip.box_length(1.000000e+00,1.500000e+00,2.000000e+00)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.create">
<description>
Create a clip part with the currently defined attributes using the currently selected parts as parents. 

| The clip part is created using the currently selected parts as parents.  The clip part is created using the currently set clip attributes.

Examples:
    ::

        #
        # Select a parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        ensight.clip.domain(&quot;inside&quot;)
        ensight.clip.tool(&quot;cylinder&quot;)
        ensight.clip.origin(-1.,0,1.)
        ensight.clip.axis(1,0,0)
        ensight.clip.radius(.75)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.create_delta">
<description>
Specify the delta offset when multiple clip instances will be created.

| For XYZ clips, this is a float value in the direction chosen for the XYZ clip.  For Plane clips, this is a float value in the plane z direction.  For IJK clips, this is should be a whole number representing the number of I, J, or K planes.
| Requires the use of the clip: number_to_create &lt;instances&gt; command in conjunction with this command.

Args:
    p0:
        &#x27;delta&#x27; the delta value to apply to each instance of multiple clips.

Examples:
    ::

        #
        # Select a parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a clip at y=1.5 and 4 additional instances at .5 delta
        #
        ensight.clip.value(1.5)
        ensight.clip.create_delta(0.5)
        ensight.clip.number_to_create(5)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.tool(&quot;xyz&quot;)
        ensight.clip.mesh_plane(&quot;Y&quot;)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.delta">
<description>
Set a delta transform for use with the keyframe animator.

| Applies only to line and plane clip types.

Args:
    p0:
        &#x27;dx&#x27; amount to translate in x direction for each animation frame
    p1:
        &#x27;dy&#x27; amount to translate in y direction for each animation frame
    p2:
        &#x27;dz&#x27; amount to translate in z direction for each animation frame

Examples:
    ::

        #
        # Select an existing clip part
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        #
        # Increment the clip position by 0.2 in the x-direction
        #
        ensight.clip.delta(.2,0,0)
        ensight.part.modify_end()
        ensight.anim_keyframe.keyframing(&quot;ON&quot;)
        ensight.anim_keyframe.create_keyframe()
        ensight.anim_keyframe.create_keyframe()
        ensight.anim_keyframe.run()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.dimension2">
<description>
Specify the minimum/maximum range for the non-constant I/J/K extract.

| For an I/J/K extract the user specifies that he wants to create a part of constant I, J, or K and an extract value.  These parameters specify the range for the non-constant plane.  

Args:
    p0:
        &#x27;min&#x27; minimum plane value integer
    p1:
        &#x27;max&#x27; maximum plane value integer

Examples:
    ::

        #
        # Select an existing I plane
        # extract an modify the J range = 10 to 60
        # and the K range to be 1 to 45
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.dimension2(10,60)
        ensight.clip.dimension3(1,45)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.dimension3">
<description>
Specify the minimum/maximum range for the non-constant I/J/K extract.

| For an I/J/K extract the user specifies that he wants to create a part of constant I, J, or K and an extract value.  These parameters specify the range for the non-constant plane.  

Args:
    p0:
        &#x27;min&#x27; minimum plane value integer
    p1:
        &#x27;max&#x27; maximum plane value integer

Examples:
    ::

        #
        # Select an existing I plane
        # extract an modify the J range = 10 to 60
        # and the K range to be 1 to 45
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.dimension2(10,60)
        ensight.clip.dimension3(1,45)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.dimension2_step">
<description>
Specify the step increment for the non-constant I/J/K extract.

| For an I/J/K extract the user specifies that he wants to create a part of constant I, J, or K and a extract value.  These parameters specify the step increment for the non-constant plane.  

Args:
    p0:
        &#x27;step&#x27; step value

Examples:
    ::

        #
        # Select an existing I plane extract
        # and modify the J step by factor
        # to 2

    ::

        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.dimension2(10,60)
        ensight.clip.dimension2_step(2)
        ensight.clip.dimension3(1,45)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.dimension3_step">
<description>
Specify the step increment for the non-constant I/J/K extract.

| For an I/J/K extract the user specifies that he wants to create a part of constant I, J, or K and a extract value.  These parameters specify the step increment for the non-constant plane.  

Args:
    p0:
        &#x27;step&#x27; step value

Examples:
    ::

        #
        # Select an existing I plane extract
        # and modify the J step by factor
        # to 2

    ::

        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.dimension2(10,60)
        ensight.clip.dimension2_step(2)
        ensight.clip.dimension3(1,45)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.domain">
<description>
Specify what type of clip will be created.

| Intersect applies to all tools except XYZ Box.
| Inside/outside/in_out apply to all tools except XYZ, IJK, and Line. 
| When domain is set to inside/outside/in_out the parent parts will be made invisible.
| The default is intersect.

Args:
    p0:
        &#x27;domain&#x27;

        * intersect
        * inside
        * outside
        * in_out
        * crinkly

Examples:
    ::

        #
        # Select the part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a new part inside the
        # cylinder tool
        #
        ensight.clip.domain(&quot;inside&quot;)
        ensight.clip.tool(&quot;cylinder&quot;)
        ensight.clip.origin(-1.,0,1.)
        ensight.clip.axis(1,0,0)
        ensight.clip.radius(.75)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.extents">
<description>
Set the clip extents to infinite or finite.

| Grid type clips are always assumed to be finite.

Args:
    p0:
        &#x27;extent&#x27;

        * finite
        * infinite

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a finite clip plane
        #
        ensight.clip.tool(&quot;plane&quot;)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.extents(&quot;finite&quot;)
        ensight.clip.plane(1,-1,-1,0)
        ensight.clip.plane(2,1,-1,0)
        ensight.clip.plane(3,1,1,0)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.general_equation">
<description>
Clip to a specified quadric equation of the form

| Ax^2 + By^2 + Cz^2 + Dxy + Eyz + Fxz + Gx + Hy + Iz = J

Args:
    p0:
        &#x27;A&#x27; The coefficient of the x^2 term
    p1:
        &#x27;B&#x27; The coefficient of the y^2 term
    p2:
        &#x27;C&#x27; The coefficient of the z^2 term
    p3:
        &#x27;D&#x27; The coefficient of the xy term
    p4:
        &#x27;E&#x27; The coefficient of the yz term
    p5:
        &#x27;F&#x27; The coefficient of the xz term
    p6:
        &#x27;G&#x27; The coefficient of the x term
    p7:
        &#x27;H&#x27; The coefficient of the y term
    p8:
        &#x27;I&#x27; The coefficient of the z term
    p9:
        &#x27;J&#x27; The constant term

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(1)
        ensight.clip.begin()
        #
        # Create a clip of the form
        # x^2 + y^2 + z^2 = .5
        #
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.tool(&quot;general_quadric&quot;)
        ensight.clip.general_equation(1,1,1,0,0,0,0,0,0,.5)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.grid_pts">
<description>
Set the number of sample points for a planar grid clip.

Args:
    p0:
        &#x27;x_pts&#x27; number of points to sample along the x plane tool direction
    p1:
        &#x27;y_pts&#x27; number of points to sample along the y plane  tool direction

Examples:
    ::

        #
        # Modify an existing
        # grid clip part
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.grid_pts(10,12)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.ijk_axis">
<description>
Display an axis system for a IJK extract.

| Is only valid for I/J/K plane clips.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON  
        * OFF

Examples:
    ::

        #
        # Turn on an axis showing the 
        # IJK layout of an existing
        # clip part
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.ijk_axis(&quot;ON&quot;)
        ensight.clip.ijk_scale(1.5)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.ijk_scale">
<description>
Specify the length of the IJK axis for IJK extracts.

| Is only valid for I/J/K plane clips.

Args:
    p0:
        &#x27;scale&#x27; length of the axis in world coordinates

Examples:
    ::

        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.ijk_axis(&quot;ON&quot;)
        ensight.clip.ijk_scale(1.5)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.increment">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.interactive_type">
<description>
Specify the interactive setting for a clip part.

| The min and max values are constrained via the slider_range_ijk commands.

Args:
    p0:
        &#x27;type&#x27;

        * off
        * manual
        * auto
        * auto_cycle

Examples:
    ::

        ensight.part.select_begin(2)
        ensight.isos.interactive_type(&quot;auto&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.line">
<description>
Set an end point for a clip line.

| Two end points are necessary to properly define the line location. 

Args:
    p0:
        &#x27;end&#x27;

        * 1 or 2, to set specified line end point
    p1:
        &#x27;x_coord&#x27; x coordinate of end point
    p2:
        &#x27;y_coord&#x27; y coordinate of end point
    p3:
        &#x27;z_coord&#x27; z coordinate of end point

Examples:
    ::

        #
        # Select a parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a line clip from
        # {-1, -1, 0} to {1, -1, 0} with
        # 25 evenly spaced points
        #
        ensight.clip.tool(&quot;line&quot;)
        ensight.clip.pts_on_line(25)
        ensight.clip.line(1,-1,-1,0)
        ensight.clip.line(2,1,-1,0)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.line_nodeid">
<description>
Create a clip line defined by the two node ids given.  If the node ids move (transient problem) the clip part must continue to follow the node ids defined.

Args:
    p0:
        &#x27;id1&#x27; the node ids defining the clip line
    p1:
        &#x27;id2&#x27; the node ids defining the clip line

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a finite clip line using two nodes
        #
        ensight.clip.select_default()
        ensight.part.modify_begin()
        ensight.clip.type(&quot;mesh&quot;)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.extents(&quot;infinite&quot;)
        ensight.clip.tool(&quot;line&quot;)
        ensight.clip.line_nodeid(2016,3040)
        ensight.part.modify_end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.mesh_plane">
<description>
Set the plane for XYZ or IJK clips

| IJK clips can only be created on block structured parts.

Args:
    p0:
        &#x27;plane&#x27;

        * X - Clip of constant X
        * Y - Clip of constant Y
        * Z - Clip of constant Z
        * I - Clip of constant I
        * J - Clip of constant J
        * K - Clip of constant K
        * R - Clip of constant radius
        * T - Clip of constant theta angle (in degrees)

Examples:
    ::

        #
        # Select a parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a clip at y=1.5
        #
        ensight.clip.value(1.5)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.tool(&quot;xyz&quot;)
        ensight.clip.mesh_plane(&quot;Y&quot;)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.number_to_create">
<description>
Specify the number of clips, at the specified delta, to create.

| This applies to XYZ and Plane clips, as well as IJK clips on block structured parts.
| Requires the use of the clip: create_delta &lt;delta&gt; command in conjunction with this command.

Args:
    p0:
        &#x27;instances&#x27; number of clip instances to create

Examples:
    ::

        #
        # Select a parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a clip at y=1.5 and 4 additional instances at .5 delta
        #
        ensight.clip.value(1.5)
        ensight.clip.create_delta(0.5)
        ensight.clip.number_to_create(5)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.tool(&quot;xyz&quot;)
        ensight.clip.mesh_plane(&quot;Y&quot;)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.origin">
<description>
Set origin for quadric and revolution clips.

| The origin together with the axis defines the location and orientation of the quadric and revolution tools.
| The origin and axis define the point and axis about which a 1D part is revolved.

Args:
    p0:
        &#x27;x_coord&#x27; x, y, z coordinates of origin
    p1:
        &#x27;y_coord&#x27; x, y, z coordinates of origin
    p2:
        &#x27;z_coord&#x27; x, y, z coordinates of origin

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(1)
        ensight.clip.begin()
        #
        # Create a cylinder clip
        # defined by the origin at {0. 0. 0}
        # a direction vector of {1, 0, 0}
        # and a radius of 0,5
        #
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.tool(&quot;cylinder&quot;)
        ensight.clip.origin(0,0,0)
        ensight.clip.axis(1,0,0)
        ensight.clip.radius(.5)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.plane">
<description>
Set a corner for a clip plane.

| Three corners are necessary to properly define the plane location.

Args:
    p0:
        &#x27;corner&#x27;

        * 1, 2 or 3, to set specified plane corner
    p1:
        &#x27;x_coord&#x27; x, y, z coordinates of corner
    p2:
        &#x27;y_coord&#x27; x, y, z coordinates of corner
    p3:
        &#x27;z_coord&#x27; x, y, z coordinates of corner

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a finite clip plane
        # with corners as defined
        #
        ensight.clip.tool(&quot;plane&quot;)
        ensight.clip.extents(&quot;finite&quot;)
        ensight.clip.plane(1,-1,-1,0)
        ensight.clip.plane(2,1,-1,0)
        ensight.clip.plane(3,1,1,0)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.plane_nodeid">
<description>
Create a clip plane defined by the three node ids given.  If the node ids move (transient problem) the clip part must continue to follow the node ids defined.

Args:
    p0:
        &#x27;id1&#x27; the node ids defining the clip plane
    p1:
        &#x27;id2&#x27; the node ids defining the clip plane
    p2:
        &#x27;id3&#x27; the node ids defining the clip plane

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a finite clip plane
        #
        ensight.clip.select_default()
        ensight.part.modify_begin()
        ensight.clip.type(&quot;mesh&quot;)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.extents(&quot;infinite&quot;)
        ensight.clip.tool(&quot;plane&quot;)
        ensight.clip.plane_nodeid(2016,3040,3025)
        ensight.part.modify_end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.point">
<description>
Defines points for the surface of revolution.

| There can be at most 10 points in the surface of revolution.
| Is only used when &quot;clip: tool&quot; is set to &quot;revolution&quot;.

Args:
    p0:
        &#x27;pt_num&#x27; point number
    p1:
        &#x27;location&#x27; location along the line
    p2:
        &#x27;radius&#x27; radius at the point location

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a clip using a tool
        # of revolution with origin at
        # {.5, .5, 0} and lined up with
        # the x-axis
        #
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.revolution_points(5)
        ensight.clip.tool(&quot;revolution&quot;)
        ensight.clip.origin(.5,.5,0)
        ensight.clip.axis(1,0,0)
        ensight.clip.point(1,-1,.5)
        ensight.clip.point(2,0,.7)
        ensight.clip.point(3,1,.5)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.pts_on_line">
<description>
Set the number of sample points for a line clip.

Args:
    p0:
        &#x27;line_pts&#x27; number of linearly spaced sample points for the line clip

Examples:
    ::

        #
        # Select an existing line clip
        # and set the number of
        # sample points to 20
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.pts_on_line(20)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.radius">
<description>
Set the radius for a sphere or cylinder clip.

Args:
    p0:
        &#x27;value&#x27; radius for the sphere or cylinder clip

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(1)
        ensight.clip.begin()
        #
        # Create a cylinder clip of
        # radius=0.5 with origin and
        # axis as shown
        #
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.tool(&quot;cylinder&quot;)
        ensight.clip.origin(0,0,0)
        ensight.clip.axis(1,0,0)
        ensight.clip.radius(.5)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.revolution_points">
<description>
Set the number of points used in the tool of revolution for clipping.

Args:
    p0:
        &#x27;number&#x27; number of points used for the revolution tool

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a clip of revolution
        # with five defined points
        #
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.revolution_points(5.0000e+00)
        ensight.clip.tool(&quot;revolution&quot;)
        ensight.clip.origin(5.0000e-01,5.0000e-01,1.0000e+00)
        ensight.clip.axis(1.0000e+00,0.0000e+00,0.0000e+00)
        ensight.clip.point(1,-1.2500e+00,5.0000e-01)
        ensight.clip.point(2,-6.2500e-01,5.0000e-01)
        ensight.clip.point(3,0.0000e+00,1.0000e+00)
        ensight.clip.point(4,6.2500e-01,5.0000e-01)
        ensight.clip.point(5,1.2500e+00,5.0000e-01)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.revolve_part">
<description>
Clip by revolving a 1D part about an axis.

| The end points for the 1D part are effectively extended to infinity during the clip.
| The part is revolved around the defined origin and axis.

Args:
    p0:
        &#x27;part_id&#x27; part ID number to revolve

Examples:
    ::

        #
        # Select an existing clip part
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        #
        # Revolve 1D part 4
        # about an axis
        #
        ensight.clip.tool(&quot;1d_part&quot;)
        ensight.clip.revolve_part(4)
        ensight.clip.origin(-2.4838e-01,-2.3340e-01,1.8757e+00)
        ensight.clip.axis(0.0000e+00,1.0000e+00,0.0000e+00)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.revolve_partbyname">
<description>
Clip by revolving a 1D part about an axis.

| This command is functionally the same as &quot;clip: revolve_part&quot; except it takes a part name as the argument instead of a part id.
| The end points for the 1D part are effectively extended to infinity during the clip. 
| The part is revolved around the defined origin and axis.

Args:
    p0:
        &#x27;part_name&#x27; part name to revolve

Examples:
    ::

        #
        # Select an existing clip part
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        #
        # Revolve part &quot;clip line&quot; about an axis
        #
        ensight.clip.tool(&quot;1d_part&quot;)
        ensight.clip.revolve_part(&quot;clip&quot;,&quot;line&quot;)
        ensight.clip.origin(-2.4838e-01,-2.3340e-01,1.8757e+00)
        ensight.clip.axis(0.0000e+00,1.0000e+00,0.0000e+00)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.rtz_axis">
<description>
Specify the axis to be used for RTZ clips. Theta is about this axis.

| The axis is in reference to the frame associated with the parent part(s).

Args:
    p0:
        &#x27;axis&#x27;

        * X  
        * Y
        * Z

Examples:
    ::

        #
        # Select a parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a Z RTZ clip about the Z axis at Z=0.
        #
        ensight.clip.tool(&quot;rtz&quot;)
        ensight.clip.rtz_axis(&quot;Z&quot;)
        ensight.clip.value(0.)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.mesh_plane(&quot;Z&quot;)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.select_default">
<description>
Sets the target to the default settings for subsequent attribute modifications.

Examples:
    ::

        #
        # Set the default clip tool to cylinder
        #
        ensight.clip.select_default()
        ensight.part.modify_begin()
        ensight.clip.tool(&quot;cylinder&quot;)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.slider_range_ijk">
<description>
Set the I, J, or K range through which an IJK clip part will be modified when in interactive mode, whether using the slider in Manual mode or in Auto or Auto Cycle mode.

| Is only used for interactive clips.

Args:
    p0:
        &#x27;beg_ijk&#x27; beginning I, J, or K plane of range.
    p1:
        &#x27;end_ijk&#x27; ending I, J, or K plane of range.

Examples:
    ::

        #
        # Set the slider ijk range for an
        # existing IJK clip plane to be within 5 and 35
        #
        ensight.part.select_begin(2)
        ensight.part.modify_begin()
        ensight.clip.tool(&quot;ijk&quot;)
        ensight.clip.slider_range_ijk(5,35)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.slider_step">
<description>
Set the value that a X/Y/Z clip part is modified when in interactive mode and the user interface less/greater buttons are selected.

| A negative step value is used when the less button is selected while a positive step value is used when the greater button is selected.
| Is only used for interactive clips.

Args:
    p0:
        &#x27;step_increment&#x27; step increment of slider

Examples:
    ::

        #
        # Set the step increment for an
        # existing clip plane to 1.0
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.tool(&quot;xyz&quot;)
        ensight.clip.slider_step(1.0)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.slider_step_ijk">
<description>
Set the value that an IJK clip part is modified when in interactive mode and the user interface less/greater buttons are selected.

| A negative step value is used when the less button is selected while a positive step value is used when the greater button is selected.
| Is only used for interactive clips.

Args:
    p0:
        &#x27;step_increment&#x27; step increment of slider

Examples:
    ::

        #
        # Set the step increment for an
        # existing IJK clip plane to 3
        #
        ensight.part.select_begin(2)
        ensight.part.modify_begin()
        ensight.clip.tool(&quot;ijk&quot;)
        ensight.clip.slider_step_ijk(3)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.slider_x">
<description>
Set the min/max X/Y/Z extents in the user interface for a clip of constant X/Y/Z.

| Is only used for interactive clips.

Args:
    p0:
        &#x27;min_value&#x27; minimum slider value
    p1:
        &#x27;max_value&#x27; maximum slider value

Examples:
    ::

        #
        # Set the min/max slider value for
        # a clip of constant X
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.slider_x(-1,4)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.slider_y">
<description>
Set the min/max X/Y/Z extents in the user interface for a clip of constant X/Y/Z.

| Is only used for interactive clips.

Args:
    p0:
        &#x27;min_value&#x27; minimum slider value
    p1:
        &#x27;max_value&#x27; maximum slider value

Examples:
    ::

        #
        # Set the min/max slider value for
        # a clip of constant X
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.slider_x(-1,4)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.slider_z">
<description>
Set the min/max X/Y/Z extents in the user interface for a clip of constant X/Y/Z.

| Is only used for interactive clips.

Args:
    p0:
        &#x27;min_value&#x27; minimum slider value
    p1:
        &#x27;max_value&#x27; maximum slider value

Examples:
    ::

        #
        # Set the min/max slider value for
        # a clip of constant X
        #
        ensight.part.select_begin(3)
        ensight.part.modify_begin()
        ensight.clip.slider_x(-1,4)
        ensight.part.modify_end()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.spine_id">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.spline_location">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.spline_name">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.tool">
<description>
Set the clipping tool.

| ijk extract can only occur using a single parent part.

Args:
    p0:
        &#x27;tool_type&#x27;

        * 1d_part
        * cone
        * cylinder
        * general_quadric
        * ijk  
        * line
        * plane
        * revolution
        * rtz
        * sphere
        * xyz
        * xyz_box

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        ensight.clip.domain(&quot;inside&quot;)
        ensight.clip.tool(&quot;cylinder&quot;)
        ensight.clip.origin(-1.,0,1.)
        ensight.clip.axis(1,0,0)
        ensight.clip.radius(.75)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.type">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.update_to_newtoollocation">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.clip.value">
<description>
Specify the constant plane value for XYZ or IJK clips.

| For IJK clips the plane_value must be an integer.

Args:
    p0:
        &#x27;plane_value&#x27; value for the plane

Examples:
    ::

        #
        # Select the parent part
        #
        ensight.part.select_begin(2)
        ensight.clip.begin()
        #
        # Create a clip of y=1.5
        #
        ensight.clip.value(1.5)
        ensight.clip.domain(&quot;intersect&quot;)
        ensight.clip.tool(&quot;xyz&quot;)
        ensight.clip.mesh_plane(&quot;Y&quot;)
        ensight.clip.end()
        ensight.clip.create()

Returns:
    zero on success, non-zero on error
</description>
</override>
</docstrings>
