<docstrings>
<override namespace="ensight.viewport.background_image">
<description>
Specify the image file to be used as the background for the selected viewport(s).

| Image file types supported are:  xpm and bmp

Args:
    p0:
        &#x27;filename&#x27; the image file to use as the background

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.background_type(&quot;image&quot;)
    | ensight.viewport.background_image(&quot;/tmp/mybackground.xpm&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.background_type">
<description>
Specify the type of background to be displayed for the selected viewport(s).

Args:
    p0:
        &#x27;type&#x27;

        * the following types are applied to the selected viewports
        * blended
        * constant
        * inherit
        * image
        * transparent

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.background_type(&quot;blended&quot;)
    | ensight.viewport.blend_levels(3)
    | ensight.viewport.blend_editlevel(1)
    | ensight.viewport.blend_rgb(1.0000e+00,1.0000e+00,1.0000e+00)
    | ensight.viewport.blend_editlevel(2)
    | ensight.viewport.blend_rgb(0.0000e+00,0.0000e+00,1.0000e+00)
    | ensight.viewport.blend_editlevel(3)
    | ensight.viewport.blend_position(3.2000e-01)
    | ensight.viewport.blend_rgb(0.0000e+00,0.0000e+00,0.0000e+00)
    | ensight.viewport.select_begin(1)
    | ensight.viewport.background_type(&quot;inherit&quot;)
    | ensight.viewport.select_begin(2)
    | ensight.viewport.background_type(&quot;constant&quot;)
    | ensight.viewport.constant_rgb(0.0000e+00,0.0000e+00,0.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.blend_editlevel">
<description>
Specify the level to edit of the corresponding blended background type for the selected viewport(s), i.e. used to edit either the position or color of the level.

Args:
    p0:
        &#x27;level_num&#x27; specified level number for the blended background type

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.background_type(&quot;blended&quot;)
    | ensight.viewport.blend_levels(3)
    | ensight.viewport.blend_editlevel(1)
    | ensight.viewport.blend_rgb(1.0000e+00,1.0000e+00,1.0000e+00)
    | ensight.viewport.blend_editlevel(2)
    | ensight.viewport.blend_rgb(0.0000e+00,0.0000e+00,1.0000e+00)
    | ensight.viewport.blend_editlevel(3)
    | ensight.viewport.blend_position(3.2000e-01)
    | ensight.viewport.blend_rgb(0.0000e+00,0.0000e+00,0.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.blend_levels">
<description>
Specify the number of (vertical) levels of the corresponding blended background type for the selected viewport(s).

Args:
    p0:
        &#x27;num&#x27; number of levels in I[1,n] for the blended background type

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.blend_levels(3)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.blend_position">
<description>
Specify the position of the specified blend level of the corresponding blended background type for the selected viewport(s).

| Blend level 0 must be located at 0.
| Blend level N must be locted at 1.
| Blend level N must be &gt; N-1.

Args:
    p0:
        &#x27;position&#x27; normalized position in I[0.,1.] for the blended background level

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.background_type(&quot;blended&quot;)
    | ensight.viewport.blend_levels(3)
    | ensight.viewport.blend_editlevel(2)
    | ensight.viewport.blend_position(3.2000e-01)
    | ensight.viewport.blend_rgb(0.0000e+00,0.0000e+00,1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.blend_rgb">
<description>
Specify the red, green and blue components of the blended background color for the specified level of the selected viewport(s).

Args:
    p0:
        &#x27;red_val&#x27; red, green, blue color component values given in I[0.,1.]
    p1:
        &#x27;grn_val&#x27; red, green, blue color component values given in I[0.,1.]
    p2:
        &#x27;blu_val&#x27; red, green, blue color component values given in I[0.,1.]

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.background_type(&quot;blended&quot;)
    | ensight.viewport.blend_levels(3)
    | ensight.viewport.blend_editlevel(2)
    | ensight.viewport.blend_position(3.2000e-01)
    | ensight.viewport.blend_rgb(0.0000e+00,0.0000e+00,1.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.border_rgb">
<description>
Set the color for the viewport border.

| By default the border color is white.
| Used only if viewport: border_visible is ON.

Args:
    p0:
        &#x27;red_val&#x27; red, green, blue color component values given in I[0.,1.]
    p1:
        &#x27;grn_val&#x27; red, green, blue color component values given in I[0.,1.]
    p2:
        &#x27;blu_val&#x27; red, green, blue color component values given in I[0.,1.]

Examples:
    | ensight.viewport.select_begin(1)
    | ensight.viewport.border_rgb(1.,0.,1.)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.border_visible">
<description>
Set visibility of viewport border.

| Viewport borders are on by default.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF 

Examples:
    | ensight.viewport.select_begin(1)
    | ensight.viewport.border_visible(&quot;OFF&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.constant_rgb">
<description>
Specify the red, green and blue components of the constant background color for the selected viewport(s)

Args:
    p0:
        &#x27;red_val&#x27; red, green, blue color component values given in I[0.,1.]
    p1:
        &#x27;grn_val&#x27; red, green, blue color component values given in I[0.,1.]
    p2:
        &#x27;blu_val&#x27; red, green, blue color component values given in I[0.,1.]

Examples:
    | ensight.viewport.select_begin(2)
    | ensight.viewport.background_type(&quot;constant&quot;)
    | ensight.viewport.constant_rgb(0.0000e+00,0.0000e+00,0.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.delete">
<description>
Delete all selected viewports.

| After selected viewports have been deleted, the main viewport (0) will be selected.
| The main viewport (0) cannot be deleted.

Examples:
    | ensight.viewport.select_begin(2,5)
    | ensight.viewport.delete()
    | ensight.viewport.select_begin(0)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.height">
<description>
Specify the normalized height for the selected viewport(s).

Args:
    p0:
        &#x27;height&#x27; normalized height I[0.,1.]

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.origin_x(3.3333e-01)
    | ensight.viewport.origin_y(0.0000e+00)
    | ensight.viewport.width(5.1712e-01)
    | ensight.viewport.height(1.0000e+00)
    | ensight.viewport.select_begin(1,2)
    | ensight.viewport.height(2.5000e-01)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.hidden_line">
<description>
Toggle whether hidden line meshes are to be overlaid onto parts in active viewport(s).

| A part will be displayed with hidden lines if:
| (a) view: hidden-line  ON
| (b) viewport: hidden_line  ON
| (c) part: hidden_line  ON

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.hidden_line(&quot;OFF&quot;)
    | ensight.viewport.select_begin(1)
    | ensight.viewport.hidden_line(&quot;ON&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.hidden_surface">
<description>
Toggle whether hidden surfaces are to be removed from parts in active viewport(s).

| A part will be displayed with shading if:
| (a) view: hidden-surface  ON
| (b) viewport: hidden_surface  ON
| (c) part: hidden_surface  ON

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.hidden_surface(&quot;OFF&quot;)
    | ensight.viewport.select_begin(1)
    | ensight.viewport.hidden_surface(&quot;ON&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.light_converttoabs">
<description>
Converts light coordinates which are relative to the viewport to be absolute (relative to the model��s coordinate system) and thus have a static lighting effect.

| none

Examples:
    | ensight.viewport.select_begin(3)
    | ensight.viewport.light1_position(&quot;Relative&quot;)
    | ensight.viewport.light1_azimuth(-9.702e+01)
    | ensight.viewport.light1_elevation(3.750e+01)
    | ensight.viewport.light_converttoabs()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.light1_azimuth">
<description>
Defines the azimuth angle of light source 1.

| This command needs to be used in conjunction with the viewport: light1_elevation &lt;angle&gt;  and viewport: light1_position &lt;option&gt; commands.

Args:
    p0:
        &#x27;angle&#x27; azimuth angle for light source 1

Examples:
    | ensight.viewport.select_begin(3)
    | ensight.viewport.light1_position(&quot;Relative&quot;)
    | ensight.viewport.light1_azimuth(-9.702e+01)
    | ensight.viewport.light1_elevation(3.750e+01)
    | ensight.viewport.light_converttoabs()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.light1_elevation">
<description>
Defines the elevation angle of light source 1.

| This command needs to be used in conjunction with the viewport: light1_azimuth &lt;angle&gt; and viewport: light1_position &lt;option&gt; commands.

Args:
    p0:
        &#x27;angle&#x27; elevation angle for light source 1

Examples:
    | ensight.viewport.select_begin(3)
    | ensight.viewport.light1_position(&quot;Relative&quot;)
    | ensight.viewport.light1_azimuth(-9.702e+01)
    | ensight.viewport.light1_elevation(3.750e+01)
    | ensight.viewport.light_converttoabs()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.light1_position">
<description>
Defines whether light source 1 is defined in the model coordinate system (absolute) or in reference to the viewer.

| This command needs to be used in conjunction with the viewport: light1_azimuth &lt;angle&gt;  and viewport: light1_elevation &lt;angle&gt; commands.

Args:
    p0:
        &#x27;option&#x27;

        * Absolute
        * Relative

Examples:
    | ensight.viewport.select_begin(3)
    | ensight.viewport.light1_position(&quot;Relative&quot;)
    | ensight.viewport.light1_azimuth(-9.702e+01)
    | ensight.viewport.light1_elevation(3.750e+01)
    | ensight.viewport.light_converttoabs()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.light2_intensity">
<description>
Defines the intensity of light source 2, which is always at the location of the viewer (camera).

| None 

Args:
    p0:
        &#x27;amount&#x27; intensity of light source 2 (between 0.0 and 1.0)

Examples:
    | ensight.viewport.select_begin(3)
    | ensight.viewport.light1_position(&quot;Relative&quot;)
    | ensight.viewport.light1_azimuth(-9.702e+01)
    | ensight.viewport.light1_elevation(3.750e+01)
    | ensight.viewport.light_converttoabs()
    | ensight.viewport.light2_intensity(3.100e-01)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.lower">
<description>
Lower the selected viewport(s) to be located beneath all the other viewports - except the main viewport.

| The main viewport (0) always remains beneath all viewports; and thus, is neither raised or lowered.

Examples:
    | ensight.viewport.select_begin(3,4)
    | ensight.viewport.lower()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.new">
<description>
Specify a new viewport to be created.

| New viewport indexing sequentially increments in the range I[1,16].

Examples:
    | ensight.viewport.new()
    | ensight.viewport.select_begin(1)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.new_or_mod">
<description>
This command has not yet been documented.

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.origin_x">
<description>
Specify the normalized x/y-coordinate value of the origin for the selected viewport(s).

Args:
    p0:
        &#x27;coord&#x27; lower left/bottom of viewport with range I[0.,1.]

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.origin_x(3.3333e-01)
    | ensight.viewport.origin_y(0.0000e+00)
    | ensight.viewport.width(5.1712e-01)
    | ensight.viewport.height(1.0000e+00)
    | ensight.viewport.select_begin(1,2)
    | ensight.viewport.origin_x(1.0000e-01)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.origin_y">
<description>
Specify the normalized x/y-coordinate value of the origin for the selected viewport(s).

Args:
    p0:
        &#x27;coord&#x27; lower left/bottom of viewport with range I[0.,1.]

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.origin_x(3.3333e-01)
    | ensight.viewport.origin_y(0.0000e+00)
    | ensight.viewport.width(5.1712e-01)
    | ensight.viewport.height(1.0000e+00)
    | ensight.viewport.select_begin(1,2)
    | ensight.viewport.origin_x(1.0000e-01)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.perspective">
<description>
Toggle whether viewing frustrum is to be perspective or orthographic in selected viewport(s).

| Geometry will be shown with perspective if:
| (a) view: perspective  ON
| (b) viewport: perspective  ON

Args:
    p0:
        &#x27;toggle&#x27;

        * one of following toggle values:
        * ON
        * OFF

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.perspective(&quot;OFF&quot;)
    | ensight.viewport.select_begin(1)
    | ensight.viewport.perspective(&quot;ON&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.raise">
<description>
Specify the selected viewport(s) to be located above all the other viewports.

| The main viewport (0) always remains beneath all viewports; and thus, is neither raised or lowered.

Examples:
    | ensight.viewport.select_begin(2)
    | ensight.viewport._raise()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.select_all">
<description>
Select all created viewports for editing.

Examples:
    | ensight.viewport.select_all()

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.select_begin">
<description>
Set active viewport(s) selection construct for subsequent viewport modification.

| All other &quot;viewport:&quot; commands operate off this setting.

Args:
    p0:
        &#x27;idn&#x27; list of viewport number(s) to be active for editing. 

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.view_transf.function(&quot;global&quot;)
    | ensight.viewport.viewport_layout(&quot;two_vertical&quot;)
    | ensight.viewport.select_begin(1,2)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.select_end">
<description>
Set active viewport(s) selection construct for subsequent viewport modification.

| All other &quot;viewport:&quot; commands operate off this setting.

Args:
    p0:
        &#x27;idn&#x27; list of viewport number(s) to be active for editing. 

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.view_transf.function(&quot;global&quot;)
    | ensight.viewport.viewport_layout(&quot;two_vertical&quot;)
    | ensight.viewport.select_begin(1,2)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.select_default">
<description>
Allows the setting of default viewport attributes prior to creating the next viewport.

Examples:
    | ensight.viewport.select_default()
    | ensight.viewport.perspective(&quot;OFF&quot;)
    | ensight.viewport.background_type(&quot;constant&quot;)
    | ensight.viewport.constant_rgb(0.0000e+00,0.0000e+00,0.0000e+00)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.track">
<description>
Specify the location of the position to track (if any tracking is to be used).  Tracking causes the viewer (camera) to stay tuned on the position chosen as the model moves.

| None

Args:
    p0:
        &#x27;location&#x27;

        * Off
        * part_centroid
        * part_xmin
        * part_xmax
        * part_ymin
        * part_ymax
        * part_zmin 
        * part_zmax
        * node_number

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.track(&quot;part_centroid&quot;)
    | ensight.viewport.tracking_part_id(9)
    | ensight.viewport.select_begin(2)
    | ensight.viewport.track(&quot;node_number&quot;)
    | ensight.viewport.tracking_part_id(21)
    | ensight.viewport.tracking_node_id(983)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.tracking_node_id">
<description>
Specify the node id to track.  Tracking causes the viewer (camera) to stay tuned on the position chosen as the model moves.

| One should also specify the part that contains this node id, because node ids are only unique within parts in EnSight.

Args:
    p0:
        &#x27;nid&#x27; The id of the node that will be tracked

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.track(&quot;part_centroid&quot;)
    | ensight.viewport.tracking_part_id(9)
    | ensight.viewport.select_begin(2)
    | ensight.viewport.track(&quot;node_number&quot;)
    | ensight.viewport.tracking_part_id(21)
    | ensight.viewport.tracking_node_id(983)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.tracking_partbyname">
<description>
Specify the part name to use for the other location options for tracking.  Tracking causes the viewer (camera) to stay tuned on the position chosen as the model moves.

| One must specify the part that will be used for the part centroid, min/max, or node number tracking option chosen in viewport: track &lt;location&gt; command

Args:
    p0:
        &#x27;partname&#x27; The name of the part that will be tracked by one of the options

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.track(&quot;part_centroid&quot;)
    | ensight.viewport.tracking_partbyname(&quot;flowfield&quot;)
    | ensight.viewport.select_begin(2)
    | ensight.viewport.track(&quot;node_number&quot;)
    | ensight.viewport.tracking_partbyname(&quot;outflow&quot;)
    | ensight.viewport.tracking_node_id(983)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.tracking_part_id">
<description>
Specify the part id to use for the other location options for tracking.  Tracking causes the viewer (camera) to stay tuned on the position chosen as the model moves.

| One must specify the part that will be used for the part centroid, min/max, or node number tracking option chosen in viewport: track &lt;location&gt; command

Args:
    p0:
        &#x27;pid&#x27; The id of the part that will be tracked by one of the options

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.track(&quot;part_centroid&quot;)
    | ensight.viewport.tracking_part_id(9)
    | ensight.viewport.select_begin(2)
    | ensight.viewport.track(&quot;node_number&quot;)
    | ensight.viewport.tracking_part_id(21)
    | ensight.viewport.tracking_node_id(983)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.view_dimension">
<description>
Set the dimension of the viewport.

| Dimension 2D is handy for displaying 2D clips and/or developed surfaces.
| A 2D viewport can only be transformed in 2D.

Args:
    p0:
        &#x27;option&#x27;

        * includes the following viewport dimensions:
        * 3D (default)
        * 2D

Examples:
    | ensight.viewport.select_begin(0,1)
    | ensight.viewport.view_dimension(&quot;3D&quot;)
    | ensight.viewport.select_begin(2)
    | ensight.viewport.view_dimension(&quot;2D&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.viewport_layout">
<description>
Specify the type of layout to be used in dividing the graphics window into viewports.

| When creating a layout of viewports, the active viewport defaults to the last viewport created, i.e. if creating four_equal viewports, the active viewport is the last of the four created.

Args:
    p0:
        &#x27;option&#x27;

        * includes the following types of viewport layouts:
        * one
        * two_vertical
        * two_horizontal
        * four_equal
        * four_withthreeleft
        * four_withthreebottom 

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.view_transf.function(&quot;global&quot;)
    | ensight.viewport.viewport_layout(&quot;two_vertical&quot;)
    | ensight.viewport.select_begin(1)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.visible">
<description>
Toggle whether selected viewports are visible.

Args:
    p0:
        &#x27;toggle&#x27;

        * ON
        * OFF

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.visible(&quot;OFF&quot;)
    | ensight.viewport.select_begin(1)
    | ensight.viewport.visible(&quot;ON&quot;)

Returns:
    zero on success, non-zero on error
</description>
</override>
<override namespace="ensight.viewport.width">
<description>
Specify the normalized width for the selected viewport(s).

Args:
    p0:
        &#x27;width&#x27; normalized width I[0.,1.]

Examples:
    | ensight.viewport.select_begin(0)
    | ensight.viewport.origin_x(3.3333e-01)
    | ensight.viewport.origin_y(0.0000e+00)
    | ensight.viewport.width(5.1712e-01)
    | ensight.viewport.height(1.0000e+00)
    | ensight.viewport.select_begin(1,2)
    | ensight.viewport.width(2.5000e-01)

Returns:
    zero on success, non-zero on error
</description>
</override>
</docstrings>
