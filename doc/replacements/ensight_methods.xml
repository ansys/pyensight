<docstrings>

<override namespace="ensight.objs.next_id">
<signature>() -> int</signature>
<paramnames>[]</paramnames>
<description>
Return the object id of the next object EnSight will allocate


All EnSight objects have a unique object ID.  These IDs are monotonically increasing.
This function returns the id number that EnSight will assign to the next object that
it creates.  It can be used to detect if an object is new, relative to when this function
is called.


Returns:
    The ENSOBJ object id of the next allocated object.

</description>
</override>

<override namespace="ensight.objs.wrap_id">
<signature>(id: int) -> "ENSOBJ"</signature>
<paramnames>["id"]</paramnames>
<description>
Return the Python proxy object for a specific EnSight object id


The EnSight Python object interface uses proxy objects. This method creates
a proxy object associated with a given object id.  If the specified id does
not exist, a RuntimeError exception is raised.

Args:
    id:
        An object id number.


Returns:
    The ENSOBJ proxy object associated with the specified id.

</description>
</override>

<override namespace="ensight.objs.valid_id">
<signature>(id: int) -> bool</signature>
<paramnames>["id"]</paramnames>
<description>
Check to see if a given id corresponds to an existing EnSight object


Args:
    id:
        An object id number.


Returns:
    True if the EnSight object with the passed id currently exists.

</description>
</override>

<override namespace="ensight.objs.enum_to_name">
<signature>(attrid: int) -> str</signature>
<paramnames>["attrid"]</paramnames>
<description>
Convert an attribute id into the associated string name


For a given attribute id, return the ASCII name of the
attribute.  If the input id is not a valid attribute,
a RuntimeError will be raised.


Args:
    attrid:
        An attribute id number.


Returns:
    The string name for the attribute number.

Example:
    ::

        ensight.objs.enum_to_name(1610613151)
        'NODEVARIABLE'

</description>
</override>


<override namespace="ensight.objs.addcallback">
<signature>(target: Union["ENSOBJ", str], obj: Any, method: str, userdata: Any = None,
            attrs: List[int] = [], flags: int = 0) -> int</signature>
<paramnames>["target", "obj", "method", "userdata=", "attrs=", "flags="]</paramnames>
<description>
Set up a Python callback that will be executed when the selected conditions are met.


Note: this method should only be used in EnSight Python scripts. For
PyEnSight scripts, use:  :meth:`pyensight.Session.add_callback`
instead.


This function will register a callback on the ``target``. The target can either be an EnSight
ENSOBJ object or the name of a class (e.g. "ENS_PART").
A Python function of the form::


    class obj:
        def method(self, target: "ENSOBJ", attribute: int, userdata: Any) -> int:
            return 0


will be called whenever an attribute of the target object/class changes. The object whose
attribute changed will be passed to the callback as ``target``.
The actual attribute that changed is passed to the callback as the ``attribute`` parameter.
By default, the callback is made for all attributes, but a restricted list of attributes
can be provided by the ``attrs`` keyword.
If a value is specified via the ``userdata`` keyword, it will passed to the callback as well.
The return value of the callback controls if the callback will be made again in the future.
If any value other than 0 is returned, the callback is removed from the queue and will
not be called again.

Args:
    target:
        The ENSOBJ instance or the string name of the ENSOBJ subclass that the callback should
        respond to attribute changes on.
    obj:
        The Python object that has the named callback method.
    method:
        The string name of the method on ``obj`` that should be called when the attribute
        change conditions are met.
    userdata:
        An optional object that will be passed to the callback.  Often used as a differentiator
        when the same method is register for multiple target/attribute tuples.
    attrs:
        The list of attribute IDs.  If there is a change in any of the attributes on the
        target object, then the callback will be executed.
    flags:
        ``ensight.objs.EVENTMAP_FLAG_IMMEDIATE`` causes the callback to be called immediately
        instead of being queued up for later when EnSight is idle. Use this flag with caution,
        it can be very expensive and can lead to recursion issues.
        ``ensight.objs.EVENTMAP_FLAG_COMP_LOCAL`` causes multiple consecutive instances of
        this callback in the deferred event queue to be consolidated into a single event.
        ``ensight.objs.EVENTMAP_FLAG_COMP_GLOBAL`` performs the same consolidation, but allows
        for discontinuous instances of the callback to be collapsed to the last callback instance.

Returns:
    The registered callback id on success or -1 if the callback could not be registered.

</description>
</override>

<override namespace="ensight.objs.removecallback">
<signature>(id: int) -> int</signature>
<paramnames>["id"]</paramnames>
<description>
Remove a callback that was registered using ensight.objs.addcallback()

Note: this method should only be used in EnSight Python scripts. For
PyEnSight scripts, use:  :meth:`pyensight.Session.remove_callback`
instead.

Args:
    id:
        A callback number returned by addcallback().


Returns:
    0 on success or -1 if the passed id could not be removed.

</description>
</override>

<override namespace="ensight.exit">
<description>
Terminate the EnSight instance::

    ensight.exit(code: int) -> None


Args:
    code:
        The exit code reported by the process termination.

</description>
</override>

<override namespace="ensight.idle">
<signature>(yield_cpu: bool = False) -> None</signature>
<paramnames>["yield_cpu="]</paramnames>
<description>
Execute EnSight idle processing


Call the EnSight idle processing loop a single time.  It is used in closed
Python loops where EnSight idle processing (animation, gRPC, etc) needs to
be allowed to take place.


Args:
    yield_cpu:
        If True, the call will give up the cpu time slice when executing
        the idle loop.  It can help reduce cpu utilization while polling.

</description>
</override>

<override namespace="ensight.refresh">
<signature>(force: int = 0) -> None</signature>
<paramnames>["force="]</paramnames>
<description>
Refresh the EnSight rendering window


Cause the EnSight rendering window to update.


Args:
    force:
        By default, the redraw will only occur if the scene is dirty.  If force
        is set to 1, the scene will be forcibly redrawn.

</description>
</override>

<override namespace="ensight.batch">
<signature>() -> int</signature>
<paramnames>[]</paramnames>
<description>
Detect if EnSight is running in batch mode


Returns:
    If EnSight is running in batch mode, this function returns 1.

</description>
</override>

<override namespace="ensight.query_xy_create">
<signature>(title: str, xtitle: str, ytitle: str,
                            data: List[List[float]],
                            segments: Optional[list] = None, filename: str = "",
                            record: int = 0, xvariable: Optional["ENS_VAR"] = None,
                            yvariable: Optional["ENS_VAR"] = None,
                            case: Optional["ENS_CASE"] = None) -> int</signature>
<paramnames>['title', 'xtitle', 'ytitle', 'data', 'segments=', 'filename=', 'record=', 'xvariable=', 'yvariable=', 'case=']</paramnames>
<description>
Create an ENS_QUERY instance

Create a new "file" XY query object.


Args:
    title:
        The title string for the query.
    xtitle:
        The title for the X axis
    ytitle:
        The title for the Y axis
    data:
        A list of XY list values.
    segments:
        This is an array of point counts.  After every count point, there will
        be a "break" in the plotted query line.
    filename:
        The filename to be associated with this query.  Note: this is just for
        reference, the file is not read.
    record:
        If set to 1, this operation will be recorded into command language.
    xvariable:
        If set to an ENS_VAR object, that object will define the units for the X axis.
    yvariable:
        If set to an ENS_VAR object, that object will define the units for the Y axis.
    case:
        If set to an ENS_CASE object, that object will define the unit system for the query.

Returns:
    The index of the created query.   The INDEX attribute of the ENS_QUERY object
    will have this value.


Example:
    ::

        data = [[1, 1], [2, 4], [3, 9]]
        qidx = ensight.query_xy_create("New Data", "X Axis", "Y Axis", data)
        query_object = max(ensight.objs.core.QUERIES)


</description>
</override>

<override namespace="ensight.query_xy_update">
<signature>(id: int, data: List[List[float]], segments: Optional[list] = None) -> int</signature>
<paramnames>['id', 'data', 'segments=']</paramnames>
<description>
Update the data values in a query

Update the data values of a "file" XY query.


Args:
    id:
        The INDEX attribute for the ENS_QUERY object to be updated.
    data:
        A list of XY list values.
    segments:
        This is an array of point counts.  After every count point, there will
        be a "break" in the plotted query line.

Returns:
    The query index id that was updated or a negative number on an error.


Example:
    ::

        data = [[1, 1], [2, 4], [3, 9]]
        qidx = ensight.query_xy_create("New Data", "X Axis", "Y Axis", data)
        query_object = max(ensight.objs.core.QUERIES)
        data = [[1, 0.5], [2, 3.5], [3, 8.5], [4, 15.5]]
        err = ensight.query_xy_create(query_object.INDEX, data)


</description>
</override>

<override namespace="ensight.query_pixelbuffer">
<signature>(x: int, y: int, x2: int = 2147483647, y2: int = 2147483647, parts_only: int = 0,
            deep_part_check: int = 0) -> list</signature>
<paramnames>['x', 'y', 'x2=', 'y2=', 'parts_only=', 'deep_part_check=']</paramnames>
<description>
Find the EnSight objects under a point or for all the points in a rectangle.

This method allows the caller to probe the rendered pixel buffer and determine
which EnSight objects are visible at a point or within a rectangle of pixels.
The x and y coordinates within the rendering window must be specified in pixels.
``0, 0`` is the lower left corner of the window.
``ensight.objs.core.WINDOWSIZE[0]-1, ensight.objs.core.WINDOWSIZE[1]-1`` is the
upper-rightmost pixel.
Specifying a rectangle of pixels is done by including x2 and y2 keyword arguments.
Note that 2147483647 is treated as "undefined" for x2 and y2.


The method can work in two ways, "Object mode" or "Part mode".  Object mode is selected
by only passing the x and y single pick point and no other options. In this mode, the
returned value is a list of lists. For example::

    [[partobj, [x,y,z]], [partobj, [x,y,z]], [annotobj, [x,y,z]]]


For a part, the x,y,z coordinates are the location on the part in model space.
For a 2D object like an annotation, x and y are the normalized screen coordinates and z is
the normalized front clip plane.  Note, this operation can be slow if a rectangle is specified.


Part mode is selected by specifying ``parts_only=1`` or ``deep_part_check=1``.  In part mode,
the return value is a simple list of ENS_PART objects. This is normally done by interrogating the
rendered pixels for the target parts.  If deep_part_check is 1, it is computed by intersecting
the geometry with the point or rectangle.  This can pick parts hidden behind other parts.


Args:
    x:
        The x position of the pixel to query (or a corner if x2 and y2 are specified).
    y:
        The y position of the pixel to query (or a corner if x2 and y2 are specified).
    x2:
        The x position of the other corner of the rectangle to query.
    y2:
        The y position of the other corner of the rectangle to query.
    parts_only:
        If set to 1, only x2 and y2 cannot be specified and the return value will be
        restricted to ENS_PART objects only.  Note: no x,y,z location will be
        included in the return value if the option is selected.
    deep_part_check:
        If set to 1, the returned set of ENS_PART objects will not be limited to the first
        part object hit in depth.  Use this option if you want to return parts that might
        be occluded by parts that are closer to the viewer.  Note: no x,y,z location will be
        included in the return value if the option is selected.

Returns:
    A list of objects that would be intersected by passing rays from the viewer though the
    selected pixel or block of pixels. The return value may or may not include the x,y,z
    coordinates (in data space) of the intersection.

</description>
</override>


<override namespace="ensight.ensvariable">
<signature>(varname: str) -> Tuple[Any, int, int]</signature>
<paramnames>['varname']</paramnames>
<description>
This method will query EnSight command language variable values and
return a tuple containing the value, its type and the scope it was
found in (similar to the command language $ functionality), allowing
access to variables defined directly in command language or computed
constants. The function returns None if the variable cannot be found.

Args:
    varname:
        The name of the command language variable to query

Returns:
    A tuple of the form: ``(value, type, scope)``.   ``type`` will be
    0 if the value is an integer, 1 if the value is a float and 2 if
    the value is a string. The ``scope`` is an integer that specifies
    where the variable was found.  -2 if the variable is in the enscl
    namespace (for example, ensight.ensvariable(enscl.FOO)).  -1 if the
    variable is an EnSight constant variable (file, case or computed variable).
    0 if the variable is global in the command language interpreter
    (for example, $globalint BAR) or is a special command language
    variable like: APPTOTALTIMESTEPS. A positive integer if the variable
    is local in the command language interpreter.  The number is the depth
    in the interpreter stack where the value is defined.

</description>
</override>

<override namespace="ensight.query_points">
<signature>(points: List[List[float]], parts: Any = None, variables: List[int] = None,
    time: float = -1e9) -> List[Any]</signature>
<paramnames>['points', 'parts=', 'variables=', 'time=']</paramnames>
<description>
Query a collection of Cartesian points against a collection of parts.  By default, the
closest node and element ids are returned.  If a list of variables are passed, the
variables will be sampled at each point in each mesh and the values returned.

Args:
    points:
        A list of points to query (a Python list of 3 value python lists).
        An example would be: ``[ [1,2,0], [2,4,2] ]`` for two points. The function
        will perform a query at each point in the list.
    parts:
        If no parts are specified, the currently selected parts will be used.
        Otherwise, parts may be set to the string "all" to search all parts or
        it may be a list of parts.  In the list, the values can be part names,
        part numbers or part objects. For example: ``parts=["mesh","field",8]``
        will include the parts named mesh, field and part number 8 in the query.
    variables:
        If present, variables should be a Python list variable that may include
        any mixture of string names, variable numbers or variable objects for
        all the variables that should be included in the query. For
        example: ``variables=["velocity","pressure",2]`` will include output
        for the variables named velocity, pressure and variable number 2 in the query.
    time:
        If not present, the query will be for the current time value in EnSight.
        The caller can also specify a specific time value using this keyword.

Return:
    The return value is a list of output lists. One list for each input point.
    If no variables are specified, the query will be about the mesh structure
    and the list for each point will appear as::

        [part_number, structuredpart_flag, closest_node, element_id]


    The values are the part number the point was found in, a flag that is non-zero
    if the part is structured, the node id of the node closest to the point and
    the element id of the element that contains the point. If a list of variables
    is specified, the returned value will be a list of lists, one for each
    variable. If the input variables were "pressure" and "velocity" (a
    scalar and a vector), the output (per point) would be::

        [ [pressure_value], [velocity_x, velocity_y, velocity_z] ]


</description>
</override>

<override namespace="ensight.query">
<signature>(option: int) -> Any</signature>
<paramnames>['option']</paramnames>
<description>
There are a large number of types of queries that this method supports.  A complete list
can be found in the EnSight Interface Manual, section 8.1.  Here, only options
that do not have better interfaces are documented.  For example, EnSight Splines and Textures are
better accessed via: ``ensight.objs.core.POLYLINES`` or ``ensight.objs.core.TEXTURES`` object
interfaces than the ``ensight.query`` options.

Args:
    option:
        There are a large number of supported options, including:

          * ensight.VIEW_MODE
          * ensight.WINDOW_SIZE
          * ensight.WINDOW_DEPTH_VALUES
          * ensight.WINDOW_RGBA_VALUES
          * ensight.TEXTURE_COUNT
          * ensight.TEXTURE_IMAGE
          * ensight.TEXTURE_BORDER_COLOR
          * ensight.TOOL_PARAMS
          * ensight.VARIABLE_PALETTE
          * ensight.VARIABLE_HISTOGRAM
          * ensight.QUERY_DATA
          * ensight.QUERY_PROBE_DATA
          * ensight.DATASET
          * ensight.TIMEVALS
          * ensight.GLCONFIG
          * ensight.SYSINFO
          * ensight.FULLSCREEN
          * ensight.BUILDINFO
          * ensight.PREFERENCESPATH
          * ensight.SENDMESG_RECORD
          * ensight.SENDMESG_RAISE
          * ensight.SENDMESG_NOEXEC
          * ensight.SENDMESG_DISPLAY
          * ensight.SENDMESG_FEEDBACK
          * ensight.UNIQUE_ID
          * ensight.SCALAR_VARIABLE_PICK
          * ensight.CMDLANG_VERSION
          * ensight.CMDLANG_VERSION_FLT
          * ensight.PARTS_WITH_SCALARVALUE
          * ensight.SPLINE_COUNT
          * ensight.SPLINE_DATA
          * ensight.FSI_TRACE_LIMIT
          * ensight.DISPLAY_MATERIALS_INFO
          * ensight.DIALOG_INFO_IMAGESAVE
          * ensight.DIALOG_INFO_ANIMSAVE

Returns:
    As noted previously, only options that do not have better APIs are listed here:

    .. list-table:: Function Arguments
        :widths: 30 70

        * - ensight.CMDLANG_VERSION
          - Returns the current EnSight command language version number being used. The
            value is returned as a string.

        * - ensight.PREFERENCESPATH
          - This query returns a string that is the directory name where EnSight is
            reading and writing preference data to.

        * - ensight.DATASET
          - Returns information about the current dataset. The output may be None if the
            current case is not loaded, otherwise a list of the
            form: ``[[filedata], coord_sys, coord_type, full_flag, [[minx ,miny, minz], [maxx, maxy, maxz]], total_nodes, total_elements, [elementlist]]``

            The FILEDATA list describes the various files opened (as specified by the
            actual reader). The information includes the filename, its size, its date and
            any number of description strings. The list has the
            form: ``[[filename, file_size, file_date, ["desc1", "desc2", ...]]``

            COORD_SYS specifies the coordinate system and can be: Cylindrical,
            Rectangular, Spherical or Unknown. COORD_TYPE specifies the temporal scheme
            and can be: Static, Changing Connectivity or Changing Coordinate.

            The FULL_FLAG is 1 if the min/max arrays are for the entire dataset. Otherwise, the
            numbers are just for the loaded parts. The subsequent arrays specify the coordinate
            min/max values for x, y and z.

            TOTAL_NODES and TOTAL_ELEMENTS specify the total number of nodes and elements in
            the dataset respectively.

            The ELEMENTLIST list describes the number of elements in the dataset of each
            element type. The list has the form: ``[["type1", num_elements1], ["type2", num_elements2],...]``


        * - ensight.GLCONFIG
          - This query returns a dictionary of OpenGL related information. The dictionary keys
            include (on most platforms):

            **"vendor"** - the OpenGL vendor string

            **"renderer"** - the OpenGL renderer string

            **"version"** - the OpenGL version string

            **"stencilbuffer"** - a non-zero integer if a stencil buffer is being used

            **"doublebuffer"** - a non-zero integer if depth buffering is being used

            **"occlusiontest"** - True if the OpenGL occlusion test is being used

            **"wirefamemode"** - True if wireframe mode is done with lines (instead of polygons)

            **"displaylist"** - True if OpenGL display lists are being used

            **"normpervertex"** - True if EnSight is generating a normal per vertex

            **"vertexcount"** - the number of vertices in a geometry block

            **"palettemode"** - "Textures" or "RGB"

            **"extensions"** - the OpenGL extension string

            **"freevideoram"** - Amount of available GPU memory, in MB (If 0, then graphics card or
            software driver does not allow a query of memory).

        * - ensight.SYSINFO
          - This query returns a dictionary of system resource related information. The
            dictionary keys include (on most platforms):

            **"numprocs"** - number of processor (cores) in the system

            **"totalmem"** - amount of physical RAM in the system (in kilobytes)

            **"freemem"** - amount of free RAM in the system (in kilobytes)

            **"memuse"** - the amount of RAM being used by the EnSight process (in kilobytes)

            **"pointersize"** - the size of a pointer in bits on the platform (32 or 64)

        * - ensight.BUILDINFO
          - This query returns a dictionary of build information for the current EnSight
            instance.  The dictionary keys include:

            **"sequence"** - An identifier for the branch.

            **"branch"** - The branch that the executable was built from.

            **"year"** - The year number that the executable was generated on.

            **"month"** - The month number that the executable was generated on.

            **"day"** - The day number that the executable was generated on.

            **"debug"** - 1 if the build is debug, 0 if release.

</description>
</override>

</docstrings>
