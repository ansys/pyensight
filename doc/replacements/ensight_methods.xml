<docstrings>

<override namespace="ensight.objs.next_id">
<signature>() -> int</signature>
<paramnames>[]</paramnames>
<description>
Return the object id of the next object EnSight will allocate


All EnSight objects have a unique object ID.  These IDs are monotonically increasing.
This function returns the id number that EnSight will assign to the next object that
it creates.  It can be used to detect if an object is new, relative to when this function
is called.


Returns:
    The ENSOBJ object id of the next allocated object.

</description>
</override>

<override namespace="ensight.objs.wrap_id">
<signature>(id: int) -> "ENSOBJ"</signature>
<paramnames>["id"]</paramnames>
<description>
Return the Python proxy object for a specific EnSight object id


The EnSight Python object interface uses proxy objects.  This method creates
a proxy object associated with a given object id.  If the specified id does
not exist, a RuntimeError exception is raised.

Args:
    id:
        An object id number.


Returns:
    The ENSOBJ proxy object associated with the specified id.

</description>
</override>

<override namespace="ensight.objs.valid_id">
<signature>(id: int) -> bool</signature>
<paramnames>["id"]</paramnames>
<description>
Check to see if a given id corresponds to an existing EnSight object


Args:
    id:
        An object id number.


Returns:
    True if the EnSight object with the passed id currently exists.

</description>
</override>

<override namespace="ensight.objs.enum_to_name">
<signature>(attrid: int) -> str</signature>
<paramnames>["attrid"]</paramnames>
<description>
Convert an attribute id into the associated string name


For a given attribute id, return the ASCII name of the
attribute.  If the input id is not a valid attribute,
a RuntimeError will be raised.


Args:
    attrid:
        An attribute id number.


Returns:
    The string name for the attribute number.

Example:
    ::

        ensight.objs.enum_to_name(1610613151)
        'NODEVARIABLE'

</description>
</override>


<override namespace="ensight.objs.addcallback">
<signature>(target: Union["ENSOBJ", str], obj: Any, method: str, userdata: Any = None,
            attrs: List[int] = [], flags: int = 0) -> int</signature>
<paramnames>["target", "obj", "method", "userdata=", "attrs=", "flags="]</paramnames>
<description>
Set up a Python callback that will be executed when the selected conditions are met.


Note: this method should only be used in EnSight Python scripts.  For
PyEnSight scripts, use:  :meth:`pyensight.Session.add_callback`
instead.


This function will register a callback on the ``target``. The target can either be an EnSight
ENSOBJ object or the name of a class (e.g. "ENS_PART").
A Python function of the form::


    class obj:
        def method(self, target: "ENSOBJ", attribute: int, userdata: Any) -> int:
            return 0


will be called whenever an attribute of the target object/class changes.  The object whose
attribute changed will be passed to the callback as ``target``.
The actual attribute that changed is passed to the callback as the ``attribute`` parameter.
By default, the callback is made for all attributes, but a restricted list of attributes
can be provided by the ``attrs`` keyword.
If a value is specified via the ``userdata`` keyword, it will passed to the callback as well.
The return value of the callback controls if the callback will be made again in the future.
If any value other than 0 is returned, the callback is removed from the queue and will
not be called again.

Args:
    target:
        The ENSOBJ instance or the string name of the ENSOBJ subclass that the callback should
        respond to attribute changes on.
    obj:
        The Python object that has the named callback method.
    method:
        The string name of the method on ``obj`` that should be called when the attribute
        change conditions are met.
    userdata:
        An optional object that will be passed to the callback.  Often used as a differentiator
        when the same method is register for multiple target/attribute tuples.
    attrs:
        The list of attribute IDs.  If there is a change in any of the attributes on the
        target object, then the callback will be executed.
    flags:
        ``ensight.objs.EVENTMAP_FLAG_IMMEDIATE`` causes the callback to be called immediately
        instead of being queued up for later when EnSight is idle. Use this flag with caution,
        it can be very expensive and can lead to recursion issues.
        ``ensight.objs.EVENTMAP_FLAG_COMP_LOCAL`` causes multiple consecutive instances of
        this callback in the deferred event queue to be consolidated into a single event.
        ``ensight.objs.EVENTMAP_FLAG_COMP_GLOBAL`` performs the same consolidation, but allows
        for discontinuous instances of the callback to be collapsed to the last callback instance.

Returns:
    The registered callback id on success or -1 if the callback could not be registered.

</description>
</override>

<override namespace="ensight.objs.removecallback">
<signature>(id: int) -> int</signature>
<paramnames>["id"]</paramnames>
<description>
Remove a callback that was registered using ensight.objs.addcallback()

Note: this method should only be used in EnSight Python scripts.  For
PyEnSight scripts, use:  :meth:`pyensight.Session.remove_callback`
instead.

Args:
    id:
        A callback number returned by addcallback().


Returns:
    0 on success or -1 if the passed id could not be removed.

</description>
</override>

<override namespace="ensight.exit">
<description>
Terminate the EnSight instance::

    ensight.exit(code: int) -> None


Args:
    code:
        The exit code reported by the process termination.

</description>
</override>

<override namespace="ensight.idle">
<signature>(yield_cpu: bool = False) -> None</signature>
<paramnames>["yield_cpu="]</paramnames>
<description>
Execute EnSight idle processing


Call the EnSight idle processing loop a single time.  It is used in closed
Python loops where EnSight idle processing (animation, gRPC, etc) needs to
be allowed to take place.


Args:
    yield_cpu:
        If True, the call will give up the cpu time slice when executing
        the idle loop.  It can help reduce cpu utilization while polling.

</description>
</override>

<override namespace="ensight.refresh">
<signature>(force: int = 0) -> None</signature>
<paramnames>["force="]</paramnames>
<description>
Refresh the EnSight rendering window


Cause the EnSight rendering window to update.


Args:
    force:
        By default, the redraw will only occur if the scene is dirty.  If force
        is set to 1, the scene will be forcibly redrawn.

</description>
</override>

<override namespace="ensight.batch">
<signature>() -> int</signature>
<paramnames>[]</paramnames>
<description>
Detect if EnSight is running in batch mode


Returns:
    If EnSight is running in batch mode, this function returns 1.

</description>
</override>

<override namespace="ensight.query_xy_create">
<signature>(title: str, xtitle: str, ytitle: str,
                            data: List[List[float]],
                            segments: Optional[list] = None, filename: str = "",
                            record: int = 0, xvariable: Optional["ENS_VAR"] = None,
                            yvariable: Optional["ENS_VAR"] = None,
                            case: Optional["ENS_CASE"] = None) -> int</signature>
<paramnames>['title', 'xtitle', 'ytitle', 'data', 'segments=', 'filename=', 'record=', 'xvariable=', 'yvariable=', 'case=']</paramnames>
<description>
Create an ENS_QUERY instance

Create a new "file" XY query object.


Args:
    title:
        The title string for the query.
    xtitle:
        The title for the X axis
    ytitle:
        The title for the Y axis
    data:
        A list of XY list values.
    segments:
        This is an array of point counts.  After every count point, there will
        be a "break" in the plotted query line.
    filename:
        The filename to be associated with this query.  Note: this is just for
        reference, the file is not read.
    record:
        If set to 1, this operation will be recorded into command language.
    xvariable:
        If set to an ENS_VAR object, that object will define the units for the X axis.
    yvariable:
        If set to an ENS_VAR object, that object will define the units for the Y axis.
    case:
        If set to an ENS_CASE object, that object will define the unit system for the query.

Returns:
    The index of the created query.   The INDEX attribute of the ENS_QUERY object
    will have this value.


Example:
    ::

        data = [[1, 1], [2, 4], [3, 9]]
        qidx = ensight.query_xy_create("New Data", "X Axis", "Y Axis", data)
        query_object = max(ensight.objs.core.QUERIES)


</description>
</override>

<override namespace="ensight.query_xy_update">
<signature>(id: int, data: List[List[float]], segments: Optional[list] = None) -> int</signature>
<paramnames>['id', 'data', 'segments=']</paramnames>
<description>
Update the data values in a query

Update the data values of a "file" XY query.


Args:
    id:
        The INDEX attribute for the ENS_QUERY object to be updated.
    data:
        A list of XY list values.
    segments:
        This is an array of point counts.  After every count point, there will
        be a "break" in the plotted query line.

Returns:
    The query index id that was updated or a negative number on an error.


Example:
    ::

        data = [[1, 1], [2, 4], [3, 9]]
        qidx = ensight.query_xy_create("New Data", "X Axis", "Y Axis", data)
        query_object = max(ensight.objs.core.QUERIES)
        data = [[1, 0.5], [2, 3.5], [3, 8.5], [4, 15.5]]
        err = ensight.query_xy_create(query_object.INDEX, data)


</description>
</override>

<override namespace="ensight.query_pixelbuffer">
<signature>(x: int, y: int, x2: int = 2147483647, y2: int = 2147483647, parts_only: int = 0,
            deep_part_check: int = 0) -> list</signature>
<paramnames>['x', 'y', 'x2=', 'y2=', 'parts_only=', 'deep_part_check=']</paramnames>
<description>
Find the EnSight objects under a point or for all the points in a rectangle.

This method allows the caller to probe the rendered pixel buffer and determine
which EnSight objects are visible at a point or within a rectangle of pixels.
The x and y coordinates within the rendering window must be specified in pixels.
``0, 0`` is the lower left corner of the window.
``ensight.objs.core.WINDOWSIZE[0]-1, ensight.objs.core.WINDOWSIZE[1]-1`` is the
upper-rightmost pixel.
Specifying a rectangle of pixels is done by including x2 and y2 keyword arguments.


The method can work in two ways, "Object mode" or "Part mode".  Object mode is selected
by only passing the x and y single pick point and no other options. In this mode, the
returned value is a list of lists. For example::

    [[partobj, [x,y,z]], [partobj, [x,y,z]], [annotobj, [x,y,z]]]


For a part, the x,y,z coordinates are the location on the part in model space.
For a 2D object like an annotation, x and y are the normalized screen coordinates and z is
the normalized front clip plane.  Note, this operation can be slow if a rectangle is specified.


Part mode is selected by specifying ``parts_only=1`` or ``deep_part_check=1``.  In part mode,
the return value is a simple list of ENS_PART objects. This is normally done by interrogating the
rendered pixels for the target parts.  If deep_part_check is 1, it is computed by intersecting
the geometry with the point or rectangle.  This can pick parts hidden behind other parts.


Args:
    x1:
        The x position of the pixel to query or a corner if x2 and y2 are specified.
    y1:
        The y position of the pixel to query or a corner if x2 and y2 are specified.
    x2:
        The x position of the other corner of the rectangle to query.
    y2:
        The y position of the other corner of the rectangle to query.
    parts_only:
        If set to 1, only x2 and y2 cannot be specified and the return value will be
        restricted to ENS_PART objects only.  Note: no x,y,z location will be
        included in the return value if the option is selected.
    deep_part_check:
        If set to 1, the returned set of ENS_PART objects will not be limited to the first
        part object hit in depth.  Use this option if you want to return parts that might
        be occluded by parts that are closer to the viewer.  Note: no x,y,z location will be
        included in the return value if the option is selected.

Returns:
    A list of objects that would be intersected by passing rays from the viewer though the
    selected pixel or block of pixels.  The return value may or may not include the x,y,z
    coordinates (in data space) of the intersection.

</description>
</override>

</docstrings>
